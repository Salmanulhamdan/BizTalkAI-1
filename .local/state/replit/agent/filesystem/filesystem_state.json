{"file_contents":{"BizTalkAI-1/client/src/components/examples/VoiceModal.tsx":{"content":"import VoiceModal from \"../VoiceModal\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function VoiceModalExample() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div>\n      <Button onClick={() => setIsOpen(true)}>Open Voice Modal</Button>\n      <VoiceModal\n        company=\"Al Ameen Bakery\"\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":455},"BizTalkAI-1/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"BizTalkAI-1/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"BizTalkAI-1/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"BizTalkAI-1/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"BizTalkAI-1/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"BizTalkAI-1/client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"BizTalkAI-1/client/src/hooks/useAinagers.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { type Ainager } from \"@shared/schema\";\n\n// Response type for paginated ainagers\nexport interface AinagersResponse {\n  ainagers: Ainager[];\n  hasMore: boolean;\n  total: number;\n}\n\n// API function to fetch ainagers with pagination and search\nasync function fetchAinagers(page: number = 1, limit: number = 10, search: string = \"\"): Promise<AinagersResponse> {\n  const params = new URLSearchParams({\n    page: page.toString(),\n    limit: limit.toString(),\n    ...(search && { search })\n  });\n  \n  const response = await fetch(`/api/ainagers?${params}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch ainagers\");\n  }\n  return response.json();\n}\n\n// API function to fetch specific ainager by ID\nasync function fetchAinagerById(id: string): Promise<Ainager> {\n  const response = await fetch(`/api/ainagers/${id}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch ainager\");\n  }\n  return response.json();\n}\n\n// Hook to fetch ainagers with pagination and search\nexport function useAinagers(page: number = 1, limit: number = 10, search: string = \"\") {\n  return useQuery({\n    queryKey: [\"ainagers\", page, limit, search],\n    queryFn: () => fetchAinagers(page, limit, search),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnWindowFocus: false,\n    keepPreviousData: true, // Keep showing old data while fetching new\n  });\n}\n\n// Hook to fetch specific ainager by ID\nexport function useAinager(id: string) {\n  return useQuery({\n    queryKey: [\"ainager\", id],\n    queryFn: () => fetchAinagerById(id),\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    refetchOnWindowFocus: false,\n  });\n}\n\n// Hook to get companies from ainagers (filtered by ainager_type = 'company')\nexport function useCompanies() {\n  const { data, isLoading, error } = useAinagers(1, 100); // Get more for filtering\n  \n  const companies = data?.ainagers?.filter(ainager => ainager.ainagerType === 'company') || [];\n  \n  return {\n    companies,\n    isLoading,\n    error,\n  };\n}\n","size_bytes":2038},"BizTalkAI-1/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"BizTalkAI-1/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"BizTalkAI-1/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"BizTalkAI-1/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"BizTalkAI-1/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"BizTalkAI-1/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"BizTalkAI-1/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"BizTalkAI-1/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"BizTalkAI-1/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"BizTalkAI-1/client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 0 0% 7%;\n\n  --border: 0 0% 95%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 0 0% 7%;\n\n  --card-border: 0 0% 93%;\n\n  --sidebar: 0 0% 98%;\n\n  --sidebar-foreground: 0 0% 7%;\n\n  --sidebar-border: 0 0% 92%;\n\n  --sidebar-primary: 211 100% 50%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 0 0% 94%;\n\n  --sidebar-accent-foreground: 0 0% 7%;\n\n  --sidebar-ring: 211 100% 50%;\n\n  --popover: 0 0% 98%;\n\n  --popover-foreground: 0 0% 7%;\n\n  --popover-border: 0 0% 91%;\n\n  --primary: 211 100% 50%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 0 0% 91%;\n\n  --secondary-foreground: 0 0% 7%;\n\n  --muted: 220 9% 96%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 220 10% 95%;\n\n  --accent-foreground: 220 9% 46%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 89%;\n  --ring: 211 100% 50%;\n  --chart-1: 211 100% 45%;\n  --chart-2: 142 71% 45%;\n  --chart-3: 262 83% 58%;\n  --chart-4: 36 100% 50%;\n  --chart-5: 171 76% 36%;\n\n  --font-sans: -apple-system, BlinkMacSystemFont, \"SF Pro Text\", \"Helvetica Neue\", Arial, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"SF Mono\", Menlo, monospace;\n  --radius: .75rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.06), 0px 1px 2px -1px hsl(0 0% 0% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.06), 0px 2px 4px -1px hsl(0 0% 0% / 0.04);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.08), 0px 3px 6px -2px hsl(0 0% 0% / 0.04);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.10), 0px 4px 8px -2px hsl(0 0% 0% / 0.04);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.12), 0px 8px 12px -4px hsl(0 0% 0% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: -0.01em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 7%;\n\n  --foreground: 0 0% 100%;\n\n  --border: 0 0% 20%;\n\n  --card: 0 0% 11%;\n\n  --card-foreground: 0 0% 100%;\n\n  --card-border: 0 0% 16%;\n\n  --sidebar: 0 0% 13%;\n\n  --sidebar-foreground: 0 0% 100%;\n\n  --sidebar-border: 0 0% 18%;\n\n  --sidebar-primary: 211 100% 50%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 0 0% 18%;\n\n  --sidebar-accent-foreground: 0 0% 100%;\n\n  --sidebar-ring: 211 100% 50%;\n\n  --popover: 0 0% 14%;\n\n  --popover-foreground: 0 0% 100%;\n\n  --popover-border: 0 0% 20%;\n\n  --primary: 211 100% 50%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 0 0% 20%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 220 9% 18%;\n\n  --muted-foreground: 220 9% 63%;\n\n  --accent: 220 10% 19%;\n\n  --accent-foreground: 220 9% 63%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 26%;\n  --ring: 211 100% 50%;\n  --chart-1: 211 100% 65%;\n  --chart-2: 142 71% 65%;\n  --chart-3: 262 83% 75%;\n  --chart-4: 36 100% 70%;\n  --chart-5: 171 76% 56%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.40);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.50);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.40), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.40), 0px 2px 4px -1px hsl(0 0% 0% / 0.30);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.50), 0px 3px 6px -2px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.60), 0px 4px 8px -2px hsl(0 0% 0% / 0.30);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.70), 0px 8px 12px -4px hsl(0 0% 0% / 0.30);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.80);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":8086},"BizTalkAI-1/client/src/components/CompanyList.tsx":{"content":"import { type Ainager } from \"@shared/schema\";\nimport CompanyListItem from \"./CompanyListItem\";\n\ninterface CompanyListProps {\n  ainagers: Ainager[];\n  onCompanyClick: (ainager: Ainager) => void;\n}\n\nexport default function CompanyList({ ainagers, onCompanyClick }: CompanyListProps) {\n  return (\n    <div className=\"px-5 py-3\" data-testid=\"list-companies\">\n      {/* Section Header */}\n      <div className=\"px-2 pb-3 flex items-center justify-between\">\n        <h2 className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n          Assistants\n        </h2>\n        <span className=\"text-xs text-muted-foreground bg-muted/50 px-2 py-1 rounded-full\">\n          {ainagers.length}\n        </span>\n      </div>\n\n      {/* List */}\n      <div className=\"space-y-1\">\n        {ainagers.map((ainager) => (\n          <CompanyListItem\n            key={ainager.ainagerId}\n            ainager={ainager}\n            onClick={onCompanyClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1008},"BizTalkAI-1/client/src/components/VoiceModal.tsx":{"content":"import { X, Mic, MicOff, Volume2, VolumeX, Phone, Clock, Waves } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { useWebRTCVoice } from \"@/hooks/useWebRTCVoice\";\n\nimport { type Ainager } from \"@shared/schema\";\n\ninterface VoiceModalProps {\n  ainager: Ainager;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst getCompanyContent = (company: string) => {\n  const companyLower = company.toLowerCase();\n  \n  if (companyLower.includes(\"bakery\")) {\n    return {\n      greeting: \"Hello! Welcome to our bakery. How can I help you today?\",\n      info: [\n        \"Fresh bread baked daily from 6 AM\",\n        \"Specialty pastries and custom cakes available\",\n        \"Gluten-free options on request\",\n        \"Catering services for events\"\n      ]\n    };\n  } else if (companyLower.includes(\"restaurant\")) {\n    return {\n      greeting: \"Good day! Thank you for calling. What can I do for you?\",\n      info: [\n        \"Open 11 AM - 10 PM daily\",\n        \"Reservations recommended for weekends\",\n        \"Traditional and contemporary cuisine\",\n        \"Private dining rooms available\"\n      ]\n    };\n  } else if (companyLower.includes(\"clinic\") || companyLower.includes(\"health\")) {\n    return {\n      greeting: \"Hello, you've reached our clinic. How may I assist you?\",\n      info: [\n        \"Walk-in appointments welcome\",\n        \"Specialist consultations available\",\n        \"Health check-up packages offered\",\n        \"Emergency services 24/7\"\n      ]\n    };\n  } else if (companyLower.includes(\"hotel\")) {\n    return {\n      greeting: \"Welcome! Thank you for contacting us. How can I help?\",\n      info: [\n        \"Luxury accommodations with modern amenities\",\n        \"Conference facilities for business events\",\n        \"Fine dining restaurant on premises\",\n        \"Spa and wellness center available\"\n      ]\n    };\n  } else if (companyLower.includes(\"bank\")) {\n    return {\n      greeting: \"Hello! You've reached our banking services. What can I help you with?\",\n      info: [\n        \"Personal and business banking solutions\",\n        \"Investment and loan services\",\n        \"24/7 online banking available\",\n        \"Financial advisory services\"\n      ]\n    };\n  } else if (companyLower.includes(\"tech\") || companyLower.includes(\"digital\") || companyLower.includes(\"systems\")) {\n    return {\n      greeting: \"Hi there! Welcome to our tech solutions. How can I assist?\",\n      info: [\n        \"Custom software development\",\n        \"Cloud infrastructure solutions\",\n        \"IT consulting and support\",\n        \"Digital transformation services\"\n      ]\n    };\n  } else if (companyLower.includes(\"industries\") || companyLower.includes(\"solutions\")) {\n    return {\n      greeting: \"Hello! Thank you for reaching out. What can I do for you?\",\n      info: [\n        \"Industrial equipment and machinery\",\n        \"Custom manufacturing solutions\",\n        \"Quality control and testing\",\n        \"Worldwide shipping available\"\n      ]\n    };\n  } else if (companyLower.includes(\"logistics\") || companyLower.includes(\"travel\")) {\n    return {\n      greeting: \"Welcome! How can we help with your logistics needs today?\",\n      info: [\n        \"Domestic and international shipping\",\n        \"Real-time package tracking\",\n        \"Express delivery options\",\n        \"Warehouse and distribution services\"\n      ]\n    };\n  } else if (companyLower.includes(\"foods\")) {\n    return {\n      greeting: \"Hello! Welcome to our food services. What can I help you with?\",\n      info: [\n        \"Premium quality food products\",\n        \"Wholesale and retail distribution\",\n        \"Fresh produce delivered daily\",\n        \"Bulk order discounts available\"\n      ]\n    };\n  } else {\n    return {\n      greeting: \"Hello! Thank you for calling. How may I assist you today?\",\n      info: [\n        \"Professional business services\",\n        \"Customer-focused solutions\",\n        \"Quality guaranteed\",\n        \"Serving the community since years\"\n      ]\n    };\n  }\n};\n\nexport default function VoiceModal({ ainager, isOpen, onClose }: VoiceModalProps) {\n  const [isMuted, setIsMuted] = useState(false);\n  const [speakerOn, setSpeakerOn] = useState(true);\n  const [sessionDuration, setSessionDuration] = useState(0);\n  const transcriptionEndRef = useRef<HTMLDivElement>(null);\n  const sessionTimerRef = useRef<NodeJS.Timeout | null>(null);\n\n  const { \n    state,\n    startSession,\n    stopSession,\n    setAudioElement,\n    addTranscriptionMessage\n  } = useWebRTCVoice({\n    company: ainager.ainagerName,\n    ainagerId: ainager.ainagerId,\n    enabled: isOpen,\n  });\n\n  // Simple log function for debugging\n  const logActivity = (message: string) => {\n    console.log(`[VoiceModal] ${message}`);\n  };\n\n  // Set up audio element for playback\n  useEffect(() => {\n    const audioElement = document.createElement('audio');\n    audioElement.autoplay = true;\n    audioElement.preload = 'auto';\n    audioElement.controls = false;\n    audioElement.style.display = 'none';\n    \n    // Add to DOM so it can play audio\n    document.body.appendChild(audioElement);\n    setAudioElement(audioElement);\n    \n    return () => {\n      audioElement.pause();\n      audioElement.srcObject = null;\n      document.body.removeChild(audioElement);\n    };\n  }, [setAudioElement]);\n\n  // Removed auto-start - user must click the green call button to connect\n\n  // Add demo messages when session is connected (only for testing)\n  useEffect(() => {\n    if (state.connectionStatus === \"connected\" && state.transcription.length === 0) {\n      // Don't add automatic greeting - let the real transcription handle it\n      logActivity(\"Session connected - ready for real-time transcription\");\n    }\n  }, [state.connectionStatus, state.transcription.length, addTranscriptionMessage]);\n\n  // Demo function to simulate user input\n  const simulateUserInput = () => {\n    const userMessages = [\n      \"Hi, I'd like to make a reservation\",\n      \"What are your opening hours?\",\n      \"Do you have vegetarian options?\",\n      \"Can I get a table for 4 people?\",\n      \"What's your address?\"\n    ];\n    const randomMessage = userMessages[Math.floor(Math.random() * userMessages.length)];\n    addTranscriptionMessage(\"You\", randomMessage);\n    \n    // Simulate Efa response after a delay\n    setTimeout(() => {\n      const efaResponses = [\n        \"Of course! I'd be happy to help you with that reservation.\",\n        \"We're open from 11 AM to 10 PM daily.\",\n        \"Yes, we have several delicious vegetarian options on our menu.\",\n        \"Absolutely! Let me check availability for 4 people.\",\n        \"We're located at 123 Main Street, Dubai.\"\n      ];\n      const randomResponse = efaResponses[Math.floor(Math.random() * efaResponses.length)];\n      addTranscriptionMessage(\"Efa\", randomResponse);\n    }, 1000);\n  };\n\n\n  // Auto-scroll to bottom when new messages are added\n  useEffect(() => {\n    transcriptionEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [state.transcription]);\n\n  // Session duration timer\n  useEffect(() => {\n    if (state.connectionStatus === \"connected\") {\n      setSessionDuration(0);\n      sessionTimerRef.current = setInterval(() => {\n        setSessionDuration(prev => prev + 1);\n      }, 1000);\n    } else {\n      if (sessionTimerRef.current) {\n        clearInterval(sessionTimerRef.current);\n        sessionTimerRef.current = null;\n      }\n      if (state.connectionStatus === \"idle\") {\n        setSessionDuration(0);\n      }\n    }\n\n    return () => {\n      if (sessionTimerRef.current) {\n        clearInterval(sessionTimerRef.current);\n      }\n    };\n  }, [state.connectionStatus]);\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n\n  if (!isOpen) return null;\n\n  const companyInitial = ainager.ainagerName.charAt(0).toUpperCase();\n  const content = getCompanyContent(ainager.ainagerName);\n\n  // Determine visual state based on connection state\n  const visualState = state.connectionStatus === \"connecting\" \n    ? \"connecting\"\n    : state.connectionStatus === \"error\"\n    ? \"error\"\n    : state.connectionStatus === \"connected\"\n    ? \"connected\"\n    : \"idle\";\n\n  const handleHangup = () => {\n    stopSession();\n    onClose();\n  };\n\n  const handleCallButton = () => {\n    if (state.connectionStatus === \"idle\" || state.connectionStatus === \"error\" || state.connectionStatus === \"disconnected\") {\n      startSession();\n    }\n  };\n\n\n  return (\n    <div\n      className=\"fixed inset-0 z-50 bg-background\"\n      style={{\n        animation: \"slideUp 300ms cubic-bezier(0.32, 0.72, 0, 1)\",\n      }}\n      data-testid=\"modal-voice\"\n    >\n      <style>{`\n        @keyframes slideUp {\n          from {\n            transform: translateY(100%);\n          }\n          to {\n            transform: translateY(0);\n          }\n        }\n        @keyframes pulse-ring {\n          0% {\n            transform: scale(0.95);\n            opacity: 1;\n          }\n          50% {\n            transform: scale(1.05);\n            opacity: 0.7;\n          }\n          100% {\n            transform: scale(0.95);\n            opacity: 1;\n          }\n        }\n        @keyframes wave {\n          0%, 100% { transform: scaleY(0.5); }\n          50% { transform: scaleY(1); }\n        }\n      `}</style>\n\n      <div className=\"flex flex-col h-full bg-gradient-to-b from-background to-muted/20\">\n        {/* Header */}\n        <div className=\"relative px-6 py-5 border-b border-border/50 bg-background/80 backdrop-blur-sm\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-primary to-primary/60 flex items-center justify-center text-white font-bold text-lg shadow-lg\">\n                {companyInitial}\n              </div>\n              <div className=\"flex-1\">\n                <h2 className=\"text-xl font-bold tracking-tight\" data-testid=\"text-company-name\">\n                  {ainager.ainagerName}\n                </h2>\n                <p className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                  <Waves className=\"w-3 h-3\" />\n                  Enterprise Friend Ainager\n                </p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className=\"hover:bg-muted rounded-full\"\n              data-testid=\"button-close-modal\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Status Banner */}\n        {state.connectionStatus === \"connecting\" && (\n          <div className=\"px-6 py-3 bg-gradient-to-r from-blue-500/10 via-primary/10 to-blue-500/10 border-b border-primary/20\">\n            <div className=\"flex items-center justify-center gap-2\">\n              <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n              <p className=\"text-sm text-primary font-medium\" data-testid=\"status-connecting\">\n                Dialing...\n              </p>\n            </div>\n          </div>\n        )}\n\n        {state.connectionStatus === \"error\" && (\n          <div className=\"px-6 py-3 bg-destructive/10 border-b border-destructive/20\">\n            <p className=\"text-sm text-center text-destructive font-medium\" data-testid=\"status-error\">\n              ⚠️ Connection lost. Please try again.\n            </p>\n          </div>\n        )}\n\n        {state.connectionStatus === \"connected\" && (\n          <div className=\"px-6 py-3 bg-gradient-to-r from-emerald-500/10 via-green-500/10 to-emerald-500/10 border-b border-green-500/20\">\n            <div className=\"flex items-center justify-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <p className=\"text-sm text-green-700 dark:text-green-400 font-medium\" data-testid=\"status-ready\">\n                  Live\n                </p>\n              </div>\n              {state.latency && (\n                <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                  <span>•</span>\n                  <span>{state.latency}ms</span>\n                </div>\n              )}\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                <Clock className=\"w-3 h-3\" />\n                <span>{formatDuration(sessionDuration)}</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Call Controls Layout */}\n        <div className=\"relative py-12\">\n          {/* Background gradient effect */}\n          <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-primary/5 to-transparent\"></div>\n          \n          <div className=\"relative flex items-center justify-center gap-12\">\n            {/* Green Call Button */}\n            <div className=\"relative\">\n              {state.connectionStatus === \"connected\" && (\n                <div \n                  className=\"absolute inset-0 bg-green-500/30 rounded-full blur-xl\"\n                  style={{ animation: \"pulse-ring 2s ease-in-out infinite\" }}\n                ></div>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className={`relative w-20 h-20 rounded-full shadow-2xl transition-all duration-300 ${\n                  state.connectionStatus === \"idle\" || state.connectionStatus === \"error\" || state.connectionStatus === \"disconnected\"\n                    ? \"bg-gradient-to-br from-green-400 to-green-600 hover:from-green-500 hover:to-green-700 hover:scale-110\"\n                    : state.connectionStatus === \"connected\"\n                    ? \"bg-gradient-to-br from-green-500 to-green-600\"\n                    : \"bg-green-500/50 cursor-not-allowed\"\n                }`}\n                onClick={handleCallButton}\n                disabled={state.connectionStatus === \"connected\" || state.connectionStatus === \"connecting\"}\n                data-testid=\"button-call\"\n              >\n                <Phone className=\"w-9 h-9 text-white drop-shadow-lg\" />\n              </Button>\n              <p className=\"text-xs text-center mt-3 text-muted-foreground font-medium\">\n                {state.connectionStatus === \"connected\" ? \"In Call\" : \"Call\"}\n              </p>\n            </div>\n\n            {/* Visualizer bars when connected */}\n            {state.connectionStatus === \"connected\" && (\n              <div className=\"flex items-center gap-1 h-16\">\n                {[...Array(5)].map((_, i) => (\n                  <div\n                    key={i}\n                    className=\"w-1.5 bg-gradient-to-t from-primary to-primary/50 rounded-full\"\n                    style={{\n                      height: \"100%\",\n                      animation: `wave ${0.5 + i * 0.1}s ease-in-out infinite`,\n                      animationDelay: `${i * 0.1}s`\n                    }}\n                  />\n                ))}\n              </div>\n            )}\n\n            {/* Red End Call Button */}\n            <div className=\"relative\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"relative w-20 h-20 rounded-full shadow-2xl bg-gradient-to-br from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 hover:scale-110 transition-all duration-300\"\n                onClick={handleHangup}\n                data-testid=\"button-hangup\"\n              >\n                <Phone className=\"w-8 h-8 text-white rotate-[135deg] drop-shadow-lg\" />\n              </Button>\n              <p className=\"text-xs text-center mt-3 text-muted-foreground font-medium\">End</p>\n            </div>\n          </div>\n\n          {/* Additional Controls */}\n          <div className=\"flex items-center justify-center gap-6 mt-8\">\n            {/* Mute Button */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className={`w-14 h-14 rounded-full transition-all ${\n                isMuted \n                  ? \"bg-red-500/20 hover:bg-red-500/30\" \n                  : \"bg-muted hover:bg-muted/80\"\n              }`}\n              onClick={() => setIsMuted(!isMuted)}\n              data-testid=\"button-mute\"\n            >\n              {isMuted ? <MicOff className=\"w-5 h-5 text-red-500\" /> : <Mic className=\"w-5 h-5\" />}\n            </Button>\n\n            {/* Speaker Button */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className={`w-14 h-14 rounded-full transition-all ${\n                !speakerOn \n                  ? \"bg-red-500/20 hover:bg-red-500/30\" \n                  : \"bg-muted hover:bg-muted/80\"\n              }`}\n              onClick={() => setSpeakerOn(!speakerOn)}\n              data-testid=\"button-speaker\"\n            >\n              {speakerOn ? <Volume2 className=\"w-5 h-5\" /> : <VolumeX className=\"w-5 h-5 text-red-500\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Chat Transcript Section */}\n        <div className=\"flex-1 overflow-y-auto px-6 pb-6\">\n          <div className=\"flex items-center justify-between mb-4 sticky top-0 bg-gradient-to-b from-background to-transparent py-3 z-10\">\n            <h3 className=\"text-sm font-bold text-muted-foreground uppercase tracking-wider\">\n              Conversation\n            </h3>\n            {state.transcription.length > 0 && (\n              <span className=\"text-xs text-muted-foreground bg-muted px-2 py-1 rounded-full\">\n                {state.transcription.length} {state.transcription.length === 1 ? 'message' : 'messages'}\n              </span>\n            )}\n          </div>\n          \n          {state.transcription.length === 0 && state.connectionStatus !== \"connected\" ? (\n            <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n              <div className=\"w-16 h-16 rounded-full bg-muted flex items-center justify-center mb-4\">\n                <Phone className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Click the green button to start your call\n              </p>\n            </div>\n          ) : state.transcription.length === 0 && state.connectionStatus === \"connected\" ? (\n            <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n              <div className=\"w-16 h-16 rounded-full bg-green-500/10 flex items-center justify-center mb-4 animate-pulse\">\n                <Mic className=\"w-8 h-8 text-green-500\" />\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Listening... Start speaking\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {state.transcription.map((message, index) => (\n                <div \n                  key={message.id} \n                  className={`flex ${message.speaker === \"You\" ? \"justify-end\" : \"justify-start\"}`}\n                >\n                  <div \n                    className={`max-w-[80%] rounded-2xl px-4 py-3 shadow-sm ${\n                      message.speaker === \"You\"\n                        ? \"bg-primary text-primary-foreground rounded-br-md\"\n                        : \"bg-muted text-foreground rounded-bl-md\"\n                    }`}\n                  >\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <span className=\"text-xs font-semibold opacity-70\">\n                        {message.speaker}\n                      </span>\n                      <span className=\"text-xs opacity-50\">\n                        {message.timestamp}\n                      </span>\n                    </div>\n                    <p className=\"text-sm leading-relaxed\">\n                      {message.text}\n                    </p>\n                  </div>\n                </div>\n              ))}\n              <div ref={transcriptionEndRef} />\n            </div>\n          )}\n        </div>\n\n      </div>\n    </div>\n  );\n}\n","size_bytes":20207},"BizTalkAI-1/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"BizTalkAI-1/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"BizTalkAI-1/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"BizTalkAI-1/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"BizTalkAI-1/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"BizTalkAI-1/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"BizTalkAI-1/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"BizTalkAI-1/client/src/components/examples/SearchBar.tsx":{"content":"import SearchBar from \"../SearchBar\";\nimport { useState } from \"react\";\n\nexport default function SearchBarExample() {\n  const [value, setValue] = useState(\"\");\n\n  return (\n    <SearchBar\n      value={value}\n      onChange={setValue}\n      onSearch={() => console.log(\"Search:\", value)}\n    />\n  );\n}\n","size_bytes":300},"BizTalkAI-1/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"BizTalkAI-1/server/realtime.ts":{"content":"import { WebSocket } from \"ws\";\nimport type { IncomingMessage } from \"http\";\n\n// Helper function to generate company-specific instructions\nfunction getCompanyInstructions(company: string): string {\n  const companyLower = company.toLowerCase();\n\n  let baseInstructions = `You are an AI assistant working as the Enterprise Front/Friend Ainager for ${company}, a hypothetical company based in Dubai. You are professional, helpful, and knowledgeable about the company's services. `;\n\n  if (companyLower.includes(\"bakery\")) {\n    baseInstructions += `You work at a bakery that offers fresh bread baked daily from 6 AM, specialty pastries, custom cakes, gluten-free options, and catering services. Help customers with orders, answer questions about products, and provide information about our services.`;\n  } else if (companyLower.includes(\"restaurant\")) {\n    baseInstructions += `You work at a restaurant open 11 AM - 10 PM daily. Reservations are recommended for weekends. We serve traditional and contemporary cuisine with private dining rooms available. Help customers make reservations, answer menu questions, and provide dining information.`;\n  } else if (companyLower.includes(\"clinic\") || companyLower.includes(\"health\")) {\n    baseInstructions += `You work at a medical clinic offering walk-in appointments, specialist consultations, health check-up packages, and 24/7 emergency services. Help patients schedule appointments, answer questions about services, and provide general information.`;\n  } else if (companyLower.includes(\"hotel\")) {\n    baseInstructions += `You work at a luxury hotel with modern amenities, conference facilities, fine dining, and a spa. Help guests with reservations, answer questions about facilities and services, and provide concierge assistance.`;\n  } else if (companyLower.includes(\"bank\")) {\n    baseInstructions += `You work at a bank offering personal and business banking, investment and loan services, 24/7 online banking, and financial advisory. Help customers with account inquiries, service information, and general banking questions.`;\n  } else if (companyLower.includes(\"tech\") || companyLower.includes(\"digital\") || companyLower.includes(\"systems\")) {\n    baseInstructions += `You work at a technology company providing custom software development, cloud infrastructure, IT consulting and support, and digital transformation services. Help clients understand our solutions and services.`;\n  } else if (companyLower.includes(\"industries\") || companyLower.includes(\"solutions\")) {\n    baseInstructions += `You work at an industrial company providing equipment, machinery, custom manufacturing, quality control, and worldwide shipping. Help clients with product inquiries and service information.`;\n  } else if (companyLower.includes(\"logistics\") || companyLower.includes(\"travel\")) {\n    baseInstructions += `You work at a logistics company offering domestic and international shipping, real-time tracking, express delivery, and warehouse services. Help customers with shipping inquiries and tracking information.`;\n  } else if (companyLower.includes(\"foods\")) {\n    baseInstructions += `You work at a food distribution company offering premium quality products, wholesale and retail distribution, fresh produce, and bulk order discounts. Help customers with product information and orders.`;\n  } else {\n    baseInstructions += `You provide professional business services with a customer-focused approach. Help callers with their inquiries and provide information about your services.`;\n  }\n\n  baseInstructions += ` Be conversational, warm, and helpful. Answer questions clearly and concisely. Since this is a demo, you can provide reasonable and professional responses based on the company name and type. Always mention that we are located in Dubai when relevant.`;\n\n  return baseInstructions;\n}\n\nexport function setupRealtimeWebSocket(\n  clientWs: WebSocket,\n  company: string,\n  req: IncomingMessage\n) {\n  const apiKey = process.env.OPENAI_API_KEY;\n  if (!apiKey) {\n    console.error(\"OPENAI_API_KEY not found\");\n    clientWs.close(1008, \"Server configuration error\");\n    return;\n  }\n\n  const url = \"wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-12-17\";\n  \n  const openaiWs = new WebSocket(url, {\n    headers: {\n      \"Authorization\": `Bearer ${apiKey}`,\n      \"OpenAI-Beta\": \"realtime=v1\",\n    },\n  });\n\n  openaiWs.on(\"open\", () => {\n    console.log(`Connected to OpenAI Realtime API for ${company}`);\n\n    // Configure session with company-specific instructions\n    const sessionConfig = {\n      type: \"session.update\",\n      session: {\n        modalities: [\"text\", \"audio\"],\n        instructions: getCompanyInstructions(company),\n        voice: \"alloy\",\n        input_audio_format: \"pcm16\",\n        output_audio_format: \"pcm16\",\n        input_audio_transcription: {\n          model: \"whisper-1\"\n        },\n        turn_detection: {\n          type: \"server_vad\",\n          threshold: 0.3,\n          prefix_padding_ms: 500,\n          silence_duration_ms: 1000,\n        },\n      },\n    };\n\n    openaiWs.send(JSON.stringify(sessionConfig));\n  });\n\n  openaiWs.on(\"message\", (data: Buffer) => {\n    // Forward messages from OpenAI to client\n    if (clientWs.readyState === WebSocket.OPEN) {\n      clientWs.send(data.toString());\n    }\n  });\n\n  openaiWs.on(\"error\", (error) => {\n    console.error(\"OpenAI WebSocket error:\", error);\n    if (clientWs.readyState === WebSocket.OPEN) {\n      clientWs.send(\n        JSON.stringify({\n          type: \"error\",\n          error: { message: \"OpenAI connection error\" },\n        })\n      );\n    }\n  });\n\n  openaiWs.on(\"close\", () => {\n    console.log(\"OpenAI WebSocket closed\");\n    if (clientWs.readyState === WebSocket.OPEN) {\n      clientWs.close();\n    }\n  });\n\n  // Forward messages from client to OpenAI\n  clientWs.on(\"message\", (data: Buffer) => {\n    if (openaiWs.readyState === WebSocket.OPEN) {\n      openaiWs.send(data.toString());\n    }\n  });\n\n  clientWs.on(\"close\", () => {\n    console.log(\"Client WebSocket closed\");\n    if (openaiWs.readyState === WebSocket.OPEN) {\n      openaiWs.close();\n    }\n  });\n\n  clientWs.on(\"error\", (error) => {\n    console.error(\"Client WebSocket error:\", error);\n    if (openaiWs.readyState === WebSocket.OPEN) {\n      openaiWs.close();\n    }\n  });\n}\n","size_bytes":6300},"BizTalkAI-1/server/storage.ts":{"content":"import { type User, type InsertUser, type Ainager, chatAinagerTable } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { drizzle } from \"drizzle-orm/mysql2\";\nimport mysql from \"mysql2/promise\";\nimport { eq, inArray, desc } from \"drizzle-orm\";\n\n// Database connection\nconst connectionConfig = {\n  host: process.env.DB_HOST || 'billsphere.com',\n  user: process.env.DB_USER || 'dulto726fxeg',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'csvfiles',\n  port: parseInt(process.env.DB_PORT || '3306'),\n};\n\n// Database connection configuration loaded\n\n// Create connection pool instead of single connection\nconst connectionPool = mysql.createPool(connectionConfig);\nexport const db = drizzle(connectionPool);\n\n// Test database connection\nconnectionPool.getConnection().then(conn => {\n  console.log('✅ Database connected');\n  return conn.ping();\n}).then(() => {\n  console.log('✅ Database ready');\n}).catch(error => {\n  console.error('❌ Database connection failed:', error.message);\n});\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAinagers(page?: number, limit?: number, search?: string): Promise<{ ainagers: Ainager[], hasMore: boolean, total: number }>;\n  getAinagerById(id: string): Promise<Ainager | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getAinagers(page: number = 1, limit: number = 10, search: string = \"\"): Promise<{ ainagers: Ainager[], hasMore: boolean, total: number }> {\n    try {\n      const offset = (page - 1) * limit;\n      const { like, and, or } = await import('drizzle-orm');\n      \n      // Build where conditions\n      let whereConditions: any = eq(chatAinagerTable.ainagerType, \"Hainager\");\n      \n      // Add search condition if search term exists\n      if (search.trim()) {\n        whereConditions = and(\n          whereConditions,\n          like(chatAinagerTable.ainagerName, `%${search.trim()}%`)\n        );\n      }\n      \n      // Get total count for pagination\n      const countResult = await db\n        .select({ count: chatAinagerTable.ainagerId })\n        .from(chatAinagerTable)\n        .where(whereConditions);\n      \n      const total = countResult.length;\n      \n      // Get paginated results\n      const result = await db\n        .select()\n        .from(chatAinagerTable)\n        .where(whereConditions)\n        .orderBy(desc(chatAinagerTable.ainagerCreateDate))\n        .limit(limit)\n        .offset(offset);\n      \n      const ainagers = result.map(row => ({\n        ainagerId: row.ainagerId,\n        ainagerName: row.ainagerName,\n        ainagerDescription: row.ainagerDescription ?? undefined,\n        ainagerCreateDate: row.ainagerCreateDate,\n        ainagerDeleteDate: row.ainagerDeleteDate ?? undefined,\n        openaiKey: row.openaiKey ?? undefined,\n        ainagerType: row.ainagerType ?? undefined,\n        ainagerInstruction: row.ainagerInstruction ?? undefined,\n        ownerId: row.ownerId ?? undefined,\n        isActive: row.isActive,\n        pdfFile: row.pdfFile ?? undefined,\n        corpmail: row.corpmail ?? undefined,\n        microops: row.microops ?? undefined,\n        parentAinager: row.parentAinager ?? undefined,\n        email: row.email ?? undefined,\n      }));\n      \n      const hasMore = offset + result.length < total;\n\n      return {\n        ainagers,\n        hasMore,\n        total\n      };\n\n    } catch (error) {\n      if (error instanceof Error) {\n        console.error(\"Error fetching ainagers:\", error.message);\n        throw new Error(`Database connection error: ${error.message}`);\n      } else {\n        console.error(\"Error fetching ainagers:\", error);\n        throw new Error(\"Database connection error: Unable to fetch ainagers\");\n      }\n    }\n  }\n\n  async getAinagerById(id: string): Promise<Ainager | undefined> {\n    try {\n      const result = await db\n        .select()\n        .from(chatAinagerTable)\n        .where(eq(chatAinagerTable.ainagerId, id))\n        .limit(1);\n      \n      if (result.length === 0) {\n        return undefined;\n      }\n      \n      const row = result[0];\n      return {\n        ainagerId: row.ainagerId ?? undefined,\n        ainagerName: row.ainagerName ?? undefined,\n        ainagerDescription: row.ainagerDescription ?? undefined,\n        ainagerCreateDate: row.ainagerCreateDate ?? undefined,\n        ainagerDeleteDate: row.ainagerDeleteDate ?? undefined,\n        openaiKey: row.openaiKey ?? undefined,\n        ainagerType: row.ainagerType ?? undefined,\n        ainagerInstruction: row.ainagerInstruction ?? undefined,\n        ownerId: row.ownerId ?? undefined,\n        isActive: row.isActive ?? undefined,\n        pdfFile: row.pdfFile ?? undefined,\n        corpmail: row.corpmail ?? undefined,\n        microops: row.microops ?? undefined,\n        parentAinager: row.parentAinager ?? undefined,\n        email: row.email ?? undefined,\n      };\n    } catch (error) {\n      if (error instanceof Error) {\n        console.error(\"Error fetching ainager by ID:\", error.message);\n        throw new Error(`Database connection error: ${error.message}`);\n      } else {\n        console.error(\"Error fetching ainager by ID:\", error);\n        throw new Error(\"Database connection error: Unable to fetch ainager\");\n      }\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6068},"BizTalkAI-1/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"BizTalkAI-1/design_guidelines.md":{"content":"# Design Guidelines: Hainager Voice Directory\n\n## Design Approach\n**Reference-Based: iOS/Apple HIG** - The existing minimalist interface establishes a strong foundation. We'll maintain the clean iOS aesthetic while layering in conversational UI patterns inspired by modern voice apps (Voice Memos, phone calls).\n\n## Core Design Principles\n1. **Mobile-First Interaction**: Touch-optimized, thumb-friendly, single-handed operation\n2. **Conversational Clarity**: Clear visual states distinguish browsing from talking modes\n3. **Minimal Distraction**: During voice conversations, UI recedes to let audio take center stage\n4. **Instant Feedback**: Every interaction provides immediate visual confirmation\n\n## Color Palette\n\n**Light Mode (Primary)**\n- Background: 255 0% 100% (white)\n- Card Surface: 255 0% 100% (white) \n- Text Primary: 0 0% 7% (#111)\n- Text Muted: 220 9% 46% (#6b7280)\n- Brand Blue: 211 100% 50% (#007aff - iOS blue)\n- Success Green: 142 71% 45% (call connected)\n- Error Red: 0 84% 60% (connection issues)\n- Divider: 0 0% 95% (#f1f1f1)\n\n**Dark Mode**\n- Background: 0 0% 7% (#111)\n- Card Surface: 0 0% 11% (#1c1c1e)\n- Text Primary: 0 0% 100% (white)\n- Text Muted: 220 9% 63%\n- Brand Blue: 211 100% 50% (same)\n- Divider: 0 0% 20%\n\n## Typography\n- **Font Stack**: -apple-system, SF Pro Text, Helvetica Neue, Arial\n- **Header Title**: 20px, weight 700, -0.2px letter-spacing\n- **Subtitle**: 13px, muted color\n- **Company Names**: 16px, weight 400\n- **Voice UI Labels**: 15px, weight 600\n- **Status Text**: 13px, weight 500\n\n## Layout System\n**Spacing Units**: Tailwind 2, 3, 4, 6, 8, 12, 16 (8px base grid)\n- Container padding: 16px horizontal\n- Card max-width: 420px\n- Safe area insets respected (iOS notch/home indicator)\n- Sticky header stays at viewport top\n- Smooth scroll behavior\n\n## Component Library\n\n### 1. Directory View (Existing)\n- Sticky header with logo + morphing subtitle\n- Search input (44px height, rounded)\n- Scrollable company list with bullet indicators\n- Active state: light blue background on tap\n\n### 2. Voice Conversation Overlay\n**Full-screen modal** that slides up from bottom when company is selected:\n\n**Header Section** (80px)\n- Company name (18px, weight 600)\n- Subtitle: \"AI Assistant\" (13px, muted)\n- Close button (top-right, 44px tap target)\n\n**Center Voice Visualizer** (expands to fill space)\n- Large circular waveform (200px diameter on mobile)\n- Pulsing animation during active speech\n- Company initial letter in center when idle\n- States: Idle → Connecting → Listening → Speaking → Error\n\n**Visual States**:\n- Idle: Static circle, light gray\n- Connecting: Rotating spinner, brand blue\n- Listening: Gentle pulse, brand blue glow\n- Speaking: Active waveform bars, green accent\n- Error: Red border pulse\n\n**Bottom Controls** (120px, safe-area-inset-bottom padding)\n- Primary action button (64px circle)\n  - Microphone icon when idle/listening\n  - Stop square when recording\n  - Phone icon for hang-up\n- Mute button (48px, left side)\n- Speaker toggle (48px, right side)\n\n### 3. Connection States\n**Toast notifications** (top of voice overlay):\n- \"Connecting...\" - Spinner + text\n- \"Connected\" - Checkmark + fade out after 1s\n- \"Connection lost\" - Red background, retry button\n- Semi-transparent background blur\n\n### 4. Buttons\n- Primary: Brand blue, 44px min height, 12px border-radius\n- Secondary: Light gray background (#f1f1f1), same dimensions\n- Icon buttons: 44px square, circular on press\n- All buttons: 600 weight, no letter-spacing\n\n## Voice UI Interaction Flow\n\n**Step 1**: User taps company name\n**Step 2**: Modal slides up (300ms ease-out)\n**Step 3**: \"Connecting...\" state shows immediately\n**Step 4**: On connection, auto-start AI greeting\n**Step 5**: Visual waveform during conversation\n**Step 6**: Tap close or hang-up to return to directory\n\n## Animations (Minimal)\n- Modal slide-up: 300ms cubic-bezier\n- Waveform pulse: 1.5s ease-in-out infinite\n- Button press: Scale 0.95, 100ms\n- Connecting spinner: 1s linear infinite\n- NO scroll-triggered animations\n- NO complex page transitions\n\n## Accessibility\n- 44px minimum tap targets\n- High contrast text (4.5:1 minimum)\n- Voice state changes announced to screen readers\n- Dark mode maintains same contrast ratios\n- Focus indicators on all interactive elements\n\n## Mobile Optimizations\n- Viewport height: 100svh (safe area aware)\n- Touch feedback on all tappable items\n- No hover states (touch-only)\n- Haptic feedback on call connect/disconnect (if available)\n- Portrait-only orientation lock recommended\n\n## Images\n**None required** - This is a utility app focused on voice interaction. The waveform visualizer and company initial circles provide sufficient visual interest without photography.","size_bytes":4709},"BizTalkAI-1/client/src/pages/not-found.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Home, SearchX } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gradient-to-br from-background via-muted/20 to-background p-4\">\n      <div className=\"w-full max-w-lg\">\n        <div className=\"relative\">\n          {/* Decorative Elements */}\n          <div className=\"absolute -top-20 -left-20 w-40 h-40 bg-primary/10 rounded-full blur-3xl\"></div>\n          <div className=\"absolute -bottom-20 -right-20 w-40 h-40 bg-destructive/10 rounded-full blur-3xl\"></div>\n          \n          {/* Main Content */}\n          <div className=\"relative bg-card/95 backdrop-blur-sm border border-border/50 rounded-3xl shadow-2xl p-10 text-center\">\n            {/* Icon */}\n            <div className=\"inline-flex items-center justify-center w-24 h-24 rounded-full bg-gradient-to-br from-destructive/20 to-destructive/10 mb-6\">\n              <SearchX className=\"w-12 h-12 text-destructive\" />\n            </div>\n            \n            {/* Title */}\n            <h1 className=\"text-6xl font-bold mb-4 bg-gradient-to-r from-foreground to-foreground/70 bg-clip-text text-transparent\">\n              404\n            </h1>\n            \n            {/* Subtitle */}\n            <h2 className=\"text-2xl font-semibold mb-3 text-foreground\">\n              Page Not Found\n            </h2>\n            \n            {/* Description */}\n            <p className=\"text-muted-foreground mb-8 max-w-md mx-auto\">\n              The page you're looking for doesn't exist or has been moved. \n              Let's get you back on track.\n            </p>\n            \n            {/* Actions */}\n            <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n              <Link href=\"/\">\n                <Button \n                  size=\"lg\" \n                  className=\"w-full sm:w-auto rounded-2xl font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n                >\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  Back to Home\n                </Button>\n              </Link>\n            </div>\n            \n            {/* Debug Info (only in development) */}\n            {process.env.NODE_ENV === 'development' && (\n              <p className=\"mt-8 text-xs text-muted-foreground/60 border-t border-border/50 pt-6\">\n                💡 Dev tip: Did you forget to add the route to the router?\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2598},"BizTalkAI-1/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"BizTalkAI-1/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"BizTalkAI-1/server/index.ts":{"content":"import \"dotenv/config\";\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2048},"BizTalkAI-1/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"BizTalkAI-1/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"BizTalkAI-1/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"BizTalkAI-1/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"BizTalkAI-1/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"BizTalkAI-1/client/public/worklets/pcm16-encoder.js":{"content":"class PCM16Encoder extends AudioWorkletProcessor {\n  process(inputs) {\n    const input = inputs[0];\n    if (!input || !input[0]) return true;\n    \n    const channel = input[0]; // mono input\n    const pcm = new Int16Array(channel.length);\n    \n    // Convert Float32 [-1,1] to Int16LE\n    for (let i = 0; i < channel.length; i++) {\n      const sample = Math.max(-1, Math.min(1, channel[i]));\n      pcm[i] = sample < 0 ? sample * 0x8000 : sample * 0x7fff;\n    }\n    \n    // Send binary data to main thread\n    this.port.postMessage(pcm.buffer, [pcm.buffer]);\n    return true;\n  }\n}\n\nregisterProcessor(\"pcm16-encoder\", PCM16Encoder);\n\n\n","size_bytes":634},"BizTalkAI-1/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"BizTalkAI-1/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"BizTalkAI-1/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"BizTalkAI-1/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"BizTalkAI-1/replit.md":{"content":"# Hainager Voice Directory\n\n## Overview\n\nHainager is an AI-powered business directory application that enables users to browse companies and initiate voice conversations with AI assistants representing those businesses. The application features a clean, iOS-inspired interface with real-time voice communication capabilities powered by OpenAI's Realtime API. Users can search through a directory of companies and engage in natural voice conversations to inquire about services, make appointments, or get information.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Replit Setup Instructions\n\n### Environment Configuration\nThe application requires the following environment variables:\n\n**Required Secrets (configured in Replit Secrets):**\n- `OPENAI_API_KEY`: Your OpenAI API key from https://platform.openai.com/account/api-keys\n- `DB_HOST`: Database host (e.g., billsphere.com)\n- `DB_USER`: Database username\n- `DB_PASSWORD`: Database password\n- `DB_NAME`: Database name\n- `DB_PORT`: Database port\n\n**Important:** The application will run without the API key, but voice functionality will not work until the key is configured.\n\n### Development\n- The development server runs on port 5000 (configured in `server/index.ts`)\n- Vite dev server is integrated with Express for hot module replacement\n- The server is configured to accept all hosts (`allowedHosts: true`) for Replit's proxy environment\n\n### Deployment\n- Build command: `npm run build`\n- Start command: `npm run start`\n- Deployment type: Autoscale (stateless web application)\n- The production build bundles both frontend (via Vite) and backend (via esbuild)\n\n### Recent Changes (October 13, 2025)\n- **GitHub Import Setup**: Successfully imported project from GitHub and configured for Replit environment\n- **Environment Secrets**: All credentials now securely stored in Replit Secrets (OPENAI_API_KEY, DB_HOST, DB_USER, DB_PASSWORD, DB_NAME, DB_PORT)\n- **Server Configuration**: Confirmed server runs on port 5000 with proper host configuration (0.0.0.0) for Replit proxy\n- **Deployment**: Configured autoscale deployment with build and start commands\n- **Database**: MySQL database connection verified and working\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool and development server\n- Wouter for lightweight client-side routing\n- TanStack Query for server state management\n- Shadcn/ui component library built on Radix UI primitives\n\n**Design System:**\n- iOS/Apple Human Interface Guidelines inspired design\n- Mobile-first responsive approach with 420px max-width container\n- Tailwind CSS for utility-first styling with custom design tokens\n- Light and dark mode support with CSS variables\n- Custom elevation system using rgba overlays for interactive states\n\n**Key Components:**\n- `DirectoryHeader`: Animated header with brand identity and subtitle rotation\n- `SearchBar`: Real-time company search with keyboard navigation\n- `CompanyList`: Virtualized list of companies with filtering\n- `VoiceModal`: Full-screen modal for voice conversation interface\n- `VoiceVisualizer`: Animated visual feedback for conversation states (idle/connecting/listening/speaking/error)\n\n**State Management Pattern:**\n- Local component state for UI interactions\n- TanStack Query for any future server data fetching needs\n- Custom React hooks for complex logic encapsulation (e.g., `useRealtimeVoice`)\n\n### Backend Architecture\n\n**Server Framework:**\n- Express.js with TypeScript for the Node.js server\n- WebSocket server for real-time bidirectional communication\n- Vite middleware integration for development mode hot module replacement\n\n**Real-time Voice Architecture:**\n- WebSocket proxy pattern: Client connects to backend WebSocket, which establishes connection to OpenAI Realtime API\n- Backend acts as secure gateway, injecting API keys and company-specific instructions\n- Audio streaming in both directions: microphone input (24kHz, 16-bit PCM) and AI response audio\n- Dynamic instruction generation based on company type (bakery, restaurant, clinic, hotel, etc.)\n- Comprehensive error handling with specific user feedback:\n  - Microphone permission denied: Prompts user to allow permissions\n  - No microphone device: Alerts user to connect a microphone\n  - WebSocket connection failure: Suggests checking internet connection\n  - Error states preserved until user reconnects or closes modal\n\n**Data Storage:**\n- In-memory storage implementation via `MemStorage` class\n- Drizzle ORM configured for PostgreSQL (ready for database integration)\n- Schema defined but storage layer currently uses in-memory fallback\n- User authentication structure prepared but not actively used\n\n**Session Management:**\n- Stateless WebSocket connections identified by company query parameter\n- No persistent sessions currently implemented\n- Future-ready with connect-pg-simple for PostgreSQL session store\n\n### External Dependencies\n\n**OpenAI Realtime API Integration:**\n- WebSocket-based connection to `wss://api.openai.com/v1/realtime`\n- Model: `gpt-4o-realtime-preview-2024-12-17`\n- Server-side API key management via environment variables\n- Custom system instructions generated per company type\n- Audio format: 24kHz sample rate, 16-bit PCM, mono channel\n\n**Database (Configured but Optional):**\n- Neon Serverless PostgreSQL driver (`@neondatabase/serverless`)\n- Drizzle ORM for type-safe database operations\n- Connection via `DATABASE_URL` environment variable\n- Migration system ready via `drizzle-kit`\n\n**UI Component Library:**\n- Radix UI primitives for accessible, unstyled components\n- 30+ pre-built Shadcn components with custom theming\n- Icons from Lucide React\n- Form handling with React Hook Form and Zod validation\n\n**Audio Processing:**\n- Web Audio API for microphone capture and audio playback\n- ScriptProcessorNode for audio stream processing\n- Base64 encoding for WebSocket audio transmission\n- Echo cancellation and noise suppression enabled\n\n**Development Tools:**\n- Replit-specific plugins for runtime error overlay and development banner\n- TypeScript strict mode for type safety\n- PostCSS with Tailwind and Autoprefixer\n- ESBuild for production server bundling","size_bytes":6255},"BizTalkAI-1/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"BizTalkAI-1/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"BizTalkAI-1/client/src/components/examples/CompanyListItem.tsx":{"content":"import CompanyListItem from \"../CompanyListItem\";\n\nexport default function CompanyListItemExample() {\n  return (\n    <div className=\"px-4\">\n      <CompanyListItem\n        company=\"Al Ameen bakery\"\n        onClick={(company) => console.log(\"Clicked:\", company)}\n      />\n    </div>\n  );\n}\n","size_bytes":288},"BizTalkAI-1/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"BizTalkAI-1/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"BizTalkAI-1/README.md":{"content":"# BizTalkAI - Voice Assistant Interface\n\nA real-time voice conversation interface with AI assistant for businesses.\n\n## Features\n\n- 🎤 Real-time voice transcription\n- 🤖 AI-powered customer service assistant\n- 📱 Mobile-optimized interface\n- 🏢 Multi-company support\n- 💬 Live chat transcript display\n\n## Setup\n\n1. **Clone the repository**\n   ```bash\n   git clone <your-repo-url>\n   cd BizTalkAI-1-working-copy-4th-october\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Set up environment variables**\n   ```bash\n   cp .env.example .env\n   ```\n   \n   Edit `.env` and add your OpenAI API key:\n   ```\n   OPENAI_API_KEY=your_actual_api_key_here\n   PORT=3000\n   NODE_ENV=development\n   ```\n\n4. **Run the development server**\n   ```bash\n   npm run dev\n   ```\n\n5. **Open your browser**\n   Navigate to `http://localhost:3000`\n\n## Getting an OpenAI API Key\n\n1. Go to [OpenAI Platform](https://platform.openai.com/account/api-keys)\n2. Sign up or log in\n3. Create a new API key\n4. Copy the key and paste it in your `.env` file\n\n## Deployment\n\n### Replit Setup\n\n1. **Import your Git repository** to Replit\n2. **Add environment variables** in Replit:\n   - Go to Secrets tab\n   - Add `OPENAI_API_KEY` with your actual API key\n   - Add `PORT` with value `3000`\n   - Add `NODE_ENV` with value `production`\n\n3. **Run the project**\n   ```bash\n   npm run dev\n   ```\n\n## Project Structure\n\n```\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/     # UI components\n│   │   ├── hooks/         # Custom hooks\n│   │   └── pages/         # Page components\n├── server/                # Express backend\n│   ├── index.ts          # Main server file\n│   ├── routes.ts         # API routes\n│   └── realtime.ts       # WebSocket handling\n├── shared/               # Shared schemas\n└── package.json         # Dependencies\n```\n\n## Environment Variables\n\n| Variable | Description | Required |\n|----------|-------------|----------|\n| `OPENAI_API_KEY` | Your OpenAI API key | Yes |\n| `PORT` | Server port | No (default: 3000) |\n| `NODE_ENV` | Environment mode | No (default: development) |\n\n## Security\n\n- Never commit your `.env` file to Git\n- Use `.env.example` as a template\n- Keep your API keys secure\n- Use environment variables in production\n\n## License\n\nMIT License\n","size_bytes":2393},"BizTalkAI-1/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"BizTalkAI-1/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"BizTalkAI-1/client/src/components/examples/VoiceVisualizer.tsx":{"content":"import VoiceVisualizer from \"../VoiceVisualizer\";\nimport { useState } from \"react\";\n\nexport default function VoiceVisualizerExample() {\n  const [state, setState] = useState<\"idle\" | \"connecting\" | \"listening\" | \"speaking\" | \"error\">(\"listening\");\n\n  return (\n    <div className=\"h-96 flex flex-col\">\n      <VoiceVisualizer state={state} companyInitial=\"A\" />\n      <div className=\"flex gap-2 justify-center mt-4\">\n        <button onClick={() => setState(\"idle\")} className=\"px-3 py-1 bg-muted rounded\">Idle</button>\n        <button onClick={() => setState(\"connecting\")} className=\"px-3 py-1 bg-muted rounded\">Connect</button>\n        <button onClick={() => setState(\"listening\")} className=\"px-3 py-1 bg-muted rounded\">Listen</button>\n        <button onClick={() => setState(\"speaking\")} className=\"px-3 py-1 bg-muted rounded\">Speak</button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":874},"BizTalkAI-1/shared/schema.ts":{"content":"import { z } from \"zod\";\nimport { mysqlTable, varchar, text, timestamp } from \"drizzle-orm/mysql-core\";\n\n// Chat Ainager table schema - matching actual database structure\nexport const chatAinagerTable = mysqlTable(\"chat_ainager\", {\n  ainagerId: varchar(\"ainager_id\", { length: 255 }).primaryKey(),\n  ainagerName: varchar(\"ainager_name\", { length: 255 }).notNull(),\n  ainagerDescription: text(\"ainager_description\"),\n  ainagerCreateDate: timestamp(\"ainager_create_date\").notNull(),\n  ainagerDeleteDate: timestamp(\"ainager_delete_date\"),\n  openaiKey: varchar(\"openai_key\", { length: 255 }),\n  ainagerType: varchar(\"ainager_type\", { length: 10 }), // 'company' or 'hainager'\n  ainagerInstruction: text(\"ainager_instruction\"),\n  ownerId: varchar(\"owner_id\", { length: 255 }),\n  isActive: varchar(\"is_active\", { length: 1 }).notNull(),\n  pdfFile: text(\"pdf_file\"),\n  corpmail: varchar(\"corpmail\", { length: 254 }),\n  microops: varchar(\"microops\", { length: 500 }),\n  parentAinager: varchar(\"parent_ainager\", { length: 255 }),\n  email: varchar(\"email\", { length: 255 }),\n});\n\n// Zod schema for validation - matching actual database structure\nexport const ainagerSchema = z.object({\n  ainagerId: z.string(),\n  ainagerName: z.string(),\n  ainagerDescription: z.string().optional(),\n  ainagerCreateDate: z.date(),\n  ainagerDeleteDate: z.date().optional(),\n  openaiKey: z.string().optional(),\n  ainagerType: z.string().optional(), // Can be 'company', 'hainager', or other values\n  ainagerInstruction: z.string().optional(),\n  ownerId: z.string().optional(),\n  isActive: z.string(),\n  pdfFile: z.string().optional(),\n  corpmail: z.string().optional(),\n  microops: z.string().optional(),\n  parentAinager: z.string().optional(),\n  email: z.string().optional(),\n});\n\nexport type Ainager = z.infer<typeof ainagerSchema>;\n\n// Static companies (fallback - will be replaced by database data)\nexport const companies = [\n  \"Al Ameen bakery\",\n  \"Al Ameen Restaurant\",\n  \"Al Ameen water\",\n  \"Al Ameen clinic\",\n  \"Al Ameen building materials\",\n  \"Al Ameen printing press\",\n  \"Al Ameen Hotel\",\n  \"Al Ameen Bank\",\n  \"Alpha Industries\",\n  \"Alpha Foods\",\n  \"Alpha Logistics\",\n  \"Alpha Labs\",\n  \"Alpha Digital\",\n  \"Alpha Energy\",\n  \"Alpha Systems\",\n  \"Beta Solutions\",\n  \"Beta Foods\",\n  \"Beta Tech\",\n  \"Beta Motors\",\n  \"Beta Electronics\",\n  \"Beta Health\",\n  \"Beta Global\",\n  \"Beta Network\",\n  \"Beta Vision\",\n  \"Beta Innovations\",\n  \"Beta Logistics\",\n  \"Beta Energy\",\n  \"Beta Media\",\n  \"Beta Travel\",\n  \"Beta Finance\",\n  \"Charlie Ventures\",\n  \"Charlie Foods\",\n  \"Charlie Digital\",\n  \"Charlie Health\",\n  \"Charlie Systems\",\n  \"Charlie Labs\",\n  \"Charlie Media\",\n  \"Charlie Innovations\",\n  \"Charlie Logistics\",\n  \"Charlie Motors\",\n  \"Charlie Travel\",\n  \"Charlie Finance\",\n  \"Charlie Electric\",\n  \"Charlie Network\",\n  \"Charlie Energy\",\n  \"Delta Technologies\",\n  \"Delta Foods\",\n  \"Delta Health\",\n  \"Delta Digital\",\n  \"Delta Global\",\n  \"Delta Media\",\n  \"Delta Logistics\",\n  \"Delta Energy\",\n  \"Delta Motors\",\n  \"Delta Innovations\",\n  \"Delta Vision\",\n  \"Delta Travel\",\n  \"Delta Finance\",\n  \"Delta Network\",\n  \"Delta Labs\",\n  \"Echo Innovations\",\n  \"Echo Foods\",\n  \"Echo Digital\",\n  \"Echo Labs\",\n  \"Echo Health\",\n  \"Echo Global\",\n  \"Echo Motors\",\n  \"Echo Travel\",\n  \"Echo Finance\",\n  \"Echo Network\",\n  \"Echo Systems\",\n  \"Echo Vision\",\n  \"Echo Energy\",\n  \"Echo Media\",\n  \"Echo Logistics\"\n];\n\nexport type Company = typeof companies[number];\n\n// User schema and types\nexport const userSchema = z.object({\n  id: z.string(),\n  username: z.string(),\n  email: z.string().email(),\n  createdAt: z.date().default(() => new Date()),\n});\n\nexport const insertUserSchema = userSchema.omit({ id: true, createdAt: true });\n\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n","size_bytes":3774},"BizTalkAI-1/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"BizTalkAI-1/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"BizTalkAI-1/client/src/components/VoiceVisualizer.tsx":{"content":"import { useEffect, useState } from \"react\";\n\ninterface VoiceVisualizerProps {\n  state: \"idle\" | \"connecting\" | \"listening\" | \"speaking\" | \"error\";\n  companyInitial: string;\n}\n\nexport default function VoiceVisualizer({ state, companyInitial }: VoiceVisualizerProps) {\n  const [pulseScale, setPulseScale] = useState(1);\n\n  useEffect(() => {\n    if (state === \"listening\" || state === \"speaking\") {\n      const interval = setInterval(() => {\n        setPulseScale(prev => prev === 1 ? 1.1 : 1);\n      }, 800);\n      return () => clearInterval(interval);\n    } else {\n      setPulseScale(1);\n    }\n  }, [state]);\n\n  const getStateColor = () => {\n    switch (state) {\n      case \"connecting\":\n        return \"border-primary bg-primary/10\";\n      case \"listening\":\n        return \"border-primary bg-primary/20\";\n      case \"speaking\":\n        return \"border-chart-2 bg-chart-2/20\";\n      case \"error\":\n        return \"border-destructive bg-destructive/20\";\n      default:\n        return \"border-border bg-muted/30\";\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center flex-1\">\n      <div\n        className={`w-48 h-48 sm:w-56 sm:h-56 rounded-full border-4 flex items-center justify-center transition-all duration-300 ${getStateColor()}`}\n        style={{\n          transform: `scale(${pulseScale})`,\n        }}\n        data-testid=\"visualizer-voice\"\n      >\n        <div className=\"text-6xl font-bold text-foreground/60\">\n          {companyInitial}\n        </div>\n        {state === \"connecting\" && (\n          <div className=\"absolute inset-0 rounded-full border-4 border-primary border-t-transparent animate-spin\" />\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1680},"BizTalkAI-1/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"BizTalkAI-1/client/src/hooks/useWebRTCVoice.ts":{"content":"import { useState, useRef, useCallback, useEffect } from \"react\";\n\nexport type ConnectionStatus = \"idle\" | \"connecting\" | \"connected\" | \"error\" | \"disconnected\";\n\nexport interface TranscriptionMessage {\n  id: string;\n  speaker: \"Efa\" | \"You\";\n  text: string;\n  timestamp: string;\n}\n\nexport interface VoiceChatState {\n  connectionStatus: ConnectionStatus;\n  isSessionActive: boolean;\n  selectedVoice: string;\n  sessionId: string | null;\n  latency: number | null;\n  activityLogs: Array<{ timestamp: string; message: string }>;\n  transcription: TranscriptionMessage[];\n}\n\nexport interface UseWebRTCVoiceProps {\n  company: string;\n  ainagerId?: string;\n  enabled: boolean;\n}\n\nexport function useWebRTCVoice({ company, ainagerId, enabled }: UseWebRTCVoiceProps) {\n  const [state, setState] = useState<VoiceChatState>({\n    connectionStatus: \"idle\",\n    isSessionActive: false,\n    selectedVoice: \"marin\",\n    sessionId: null,\n    latency: null,\n    activityLogs: [],\n    transcription: [],\n  });\n\n  const peerConnectionRef = useRef<RTCPeerConnection | null>(null);\n  const localStreamRef = useRef<MediaStream | null>(null);\n  const audioElementRef = useRef<HTMLAudioElement | null>(null);\n  const latencyCheckIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const stopSessionRef = useRef<(() => void) | null>(null);\n  \n  // ✅ SESSION TIMEOUT SAFEGUARDS - Prevents runaway costs\n  // Track last activity time to detect idle sessions\n  const lastActivityTimeRef = useRef<number>(Date.now());\n  // Track session start time for hard limit calculation\n  const sessionStartTimeRef = useRef<number>(0);\n  // Idle timeout: auto-disconnect after 8 minutes of no activity\n  const idleTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const logActivity = useCallback((message: string) => {\n    const timestamp = new Date().toLocaleTimeString();\n    setState(prev => ({\n      ...prev,\n      activityLogs: [...prev.activityLogs, { timestamp, message }],\n    }));\n  }, []);\n\n  const addTranscriptionMessage = useCallback((speaker: \"Efa\" | \"You\", text: string) => {\n    const timestamp = new Date().toLocaleTimeString();\n    const id = `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const message: TranscriptionMessage = { id, speaker, text, timestamp };\n    \n    setState(prev => ({\n      ...prev,\n      transcription: [...prev.transcription, message],\n    }));\n  }, []);\n\n  const updateConnectionStatus = useCallback((status: ConnectionStatus) => {\n    setState(prev => ({ ...prev, connectionStatus: status }));\n  }, []);\n\n  // ✅ Reset activity timer whenever there's any activity\n  // This keeps the session alive as long as user/AI are actively communicating\n  const resetActivityTimer = useCallback(() => {\n    lastActivityTimeRef.current = Date.now();\n    \n    // Clear and restart idle timeout (8 minutes)\n    if (idleTimeoutRef.current) {\n      clearTimeout(idleTimeoutRef.current);\n    }\n    \n    idleTimeoutRef.current = setTimeout(() => {\n      const idleMinutes = Math.floor((Date.now() - lastActivityTimeRef.current) / 1000 / 60);\n      const totalMinutes = Math.floor((Date.now() - sessionStartTimeRef.current) / 1000 / 60);\n      \n      // Check if session has exceeded 15 minutes total when becoming idle\n      if (totalMinutes >= 15) {\n        logActivity(`⏱️ Session auto-closed: 15-minute hard limit reached (${totalMinutes} minutes total, idle for ${idleMinutes} minutes)`);\n        console.log(`[Cost Safeguard] Auto-disconnecting: session exceeded 15 minutes (${totalMinutes} min) and is now idle`);\n      } else {\n        logActivity(`⏱️ Session auto-closed: No activity for ${idleMinutes} minutes (idle timeout)`);\n        console.log(`[Cost Safeguard] Auto-disconnecting due to ${idleMinutes} minutes of inactivity`);\n      }\n      // Use ref to avoid circular dependency\n      if (stopSessionRef.current) {\n        stopSessionRef.current();\n      }\n    }, 8 * 60 * 1000); // 8 minutes in milliseconds\n  }, [logActivity]);\n\n  // ✅ Clear all timeout timers to prevent memory leaks and phantom disconnects\n  const clearAllTimeouts = useCallback(() => {\n    if (idleTimeoutRef.current) {\n      clearTimeout(idleTimeoutRef.current);\n      idleTimeoutRef.current = null;\n    }\n  }, []);\n\n  const startSession = useCallback(async () => {\n    try {\n      logActivity(\"Requesting session start...\");\n      updateConnectionStatus(\"connecting\");\n\n      // Step 1: Get ephemeral client secret from our server\n      logActivity(\"Requesting ephemeral token...\");\n      const sessionResponse = await fetch(\"/api/session\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ \n          voice: state.selectedVoice,\n          model: \"gpt-4o-realtime-preview-2024-10-01\",\n          company: company,\n          ainagerId: ainagerId\n        }),\n      });\n\n      if (!sessionResponse.ok) {\n        const errorData = await sessionResponse.json();\n        throw new Error(errorData.error || \"Failed to get session token\");\n      }\n\n      const { client_secret, session } = await sessionResponse.json();\n      const tokenValue = client_secret.value || client_secret;\n      logActivity(`Ephemeral token received: ${tokenValue.substring(0, 10)}...`);\n\n      // Step 2: Request microphone permission\n      logActivity(\"Requesting microphone access...\");\n      try {\n        localStreamRef.current = await navigator.mediaDevices.getUserMedia({ \n          audio: {\n            echoCancellation: true,\n            noiseSuppression: true,\n            autoGainControl: true,\n          } \n        });\n        logActivity(\"Microphone access granted\");\n      } catch (micError) {\n        throw new Error(\"Microphone access denied. Please allow microphone access and try again.\");\n      }\n\n      // Step 3: Create RTCPeerConnection\n      logActivity(\"Creating WebRTC connection...\");\n      peerConnectionRef.current = new RTCPeerConnection({\n        iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\n      });\n\n      const pc = peerConnectionRef.current;\n\n      // Step 4: Add local stream\n      localStreamRef.current.getTracks().forEach(track => {\n        pc.addTrack(track, localStreamRef.current!);\n      });\n\n      // Step 5: Create data channel for events (optional but recommended)\n      const dataChannel = pc.createDataChannel(\"oai-events\");\n      dataChannel.onopen = () => {\n        logActivity(\"Data channel opened\");\n        \n        // ✅ Start activity tracking when session begins\n        // Record session start time for hard limit calculation\n        sessionStartTimeRef.current = Date.now();\n        resetActivityTimer();\n        \n        // Generate company-specific instructions\n        const companyLower = company.toLowerCase();\n        let instructions = `You are an AI assistant working as the Enterprise Front/Friend Ainager for ${company}, a hypothetical company based in Dubai. You are professional, helpful, and knowledgeable about the company's services. `;\n\n        if (companyLower.includes(\"bakery\")) {\n          instructions += `You work at a bakery that offers fresh bread baked daily from 6 AM, specialty pastries, custom cakes, gluten-free options, and catering services. Help customers with orders, answer questions about products, and provide information about our services.`;\n        } else if (companyLower.includes(\"restaurant\")) {\n          instructions += `You work at a restaurant open 11 AM - 10 PM daily. Reservations are recommended for weekends. We serve traditional and contemporary cuisine with private dining rooms available. Help customers make reservations, answer menu questions, and provide dining information.`;\n        } else if (companyLower.includes(\"clinic\") || companyLower.includes(\"health\")) {\n          instructions += `You work at a medical clinic offering walk-in appointments, specialist consultations, health check-up packages, and 24/7 emergency services. Help patients schedule appointments, answer questions about services, and provide general information.`;\n        } else if (companyLower.includes(\"hotel\")) {\n          instructions += `You work at a luxury hotel with modern amenities, conference facilities, fine dining, and a spa. Help guests with reservations, answer questions about facilities and services, and provide concierge assistance.`;\n        } else if (companyLower.includes(\"bank\")) {\n          instructions += `You work at a bank offering personal and business banking, investment and loan services, 24/7 online banking, and financial advisory. Help customers with account inquiries, service information, and general banking questions.`;\n        } else if (companyLower.includes(\"tech\") || companyLower.includes(\"digital\") || companyLower.includes(\"systems\")) {\n          instructions += `You work at a technology company providing custom software development, cloud infrastructure, IT consulting and support, and digital transformation services. Help clients understand our solutions and services.`;\n        } else if (companyLower.includes(\"industries\") || companyLower.includes(\"solutions\")) {\n          instructions += `You work at an industrial company providing equipment, machinery, custom manufacturing, quality control, and worldwide shipping. Help clients with product inquiries and service information.`;\n        } else if (companyLower.includes(\"logistics\") || companyLower.includes(\"travel\")) {\n          instructions += `You work at a logistics company offering domestic and international shipping, real-time tracking, express delivery, and warehouse services. Help customers with shipping inquiries and tracking information.`;\n        } else if (companyLower.includes(\"foods\")) {\n          instructions += `You work at a food distribution company offering premium quality products, wholesale and retail distribution, fresh produce, and bulk order discounts. Help customers with product information and orders.`;\n        } else {\n          instructions += `You provide professional business services with a customer-focused approach. Help callers with their inquiries and provide information about your services.`;\n        }\n\n        instructions += ` Be conversational, warm, and helpful. Answer questions clearly and concisely. Since this is a demo, you can provide reasonable and professional responses based on the company name and type. Always mention that we are located in Dubai when relevant.`;\n        \n        // Send session configuration with company-specific instructions\n        const sessionConfig = {\n          type: \"session.update\",\n          session: {\n            modalities: [\"text\", \"audio\"],\n            instructions: instructions,\n            voice: state.selectedVoice,\n            input_audio_transcription: {\n              model: \"whisper-1\"\n            },\n            output_audio_transcription: {\n              model: \"whisper-1\"\n            },\n            turn_detection: {\n              type: \"server_vad\",\n              threshold: 0.5,\n              silence_duration_ms: 500\n            }\n          }\n        };\n        \n        dataChannel.send(JSON.stringify(sessionConfig));\n        logActivity(`Sent session config for ${company}`);\n      };\n      \n      dataChannel.onmessage = (event) => {\n        // ✅ Any message received = activity detected, reset idle timer\n        resetActivityTimer();\n        \n        try {\n          const data = JSON.parse(event.data);\n          logActivity(`Data channel message: ${JSON.stringify(data, null, 2)}`);\n          \n          // Handle different message types\n          if (data.type === \"conversation.item.input_audio_transcription.completed\") {\n            // User speech transcribed\n            const transcript = data.transcript;\n            if (transcript) {\n              logActivity(`User transcript: ${transcript}`);\n              addTranscriptionMessage(\"You\", transcript);\n            }\n          } else if (data.type === \"conversation.item.input_audio_transcription.failed\") {\n            logActivity(\"User transcription failed\");\n          } else if (data.type === \"input_audio_buffer.speech_started\") {\n            logActivity(\"User started speaking\");\n          } else if (data.type === \"input_audio_buffer.speech_stopped\") {\n            logActivity(\"User stopped speaking\");\n          } else if (data.type === \"response.audio_transcript.delta\") {\n            // AI response transcription in progress\n            if (data.delta) {\n              logActivity(`AI transcript delta: ${data.delta}`);\n            }\n          } else if (data.type === \"response.audio_transcript.done\") {\n            // AI response transcription completed\n            const transcript = data.transcript;\n            if (transcript) {\n              logActivity(`AI transcript: ${transcript}`);\n              addTranscriptionMessage(\"Efa\", transcript);\n            }\n          } else if (data.type === \"response.done\") {\n            // AI response completed - check if we have a transcript\n            if (data.response && data.response.output && data.response.output.length > 0) {\n              const lastOutput = data.response.output[data.response.output.length - 1];\n              if (lastOutput.type === \"message\" && lastOutput.content) {\n                // Extract text content from the response\n                const textContent = lastOutput.content.find((item: any) => item.type === \"text\");\n                if (textContent && textContent.text) {\n                  logActivity(`AI response text: ${textContent.text}`);\n                  addTranscriptionMessage(\"Efa\", textContent.text);\n                }\n              }\n            }\n          } else if (data.type === \"error\") {\n            logActivity(`Error: ${data.error?.message || 'Unknown error'}`);\n          }\n        } catch (error) {\n          logActivity(`Data channel message (raw): ${event.data}`);\n        }\n      };\n\n      // Step 6: Handle incoming audio stream\n      pc.ontrack = (event) => {\n        logActivity(\"Received remote audio stream\");\n        // ✅ Audio received = activity detected\n        resetActivityTimer();\n        if (audioElementRef.current) {\n          audioElementRef.current.srcObject = event.streams[0];\n        }\n      };\n\n      // Step 7: Handle connection state changes\n      pc.onconnectionstatechange = () => {\n        logActivity(`Connection state: ${pc.connectionState}`);\n        \n        if (pc.connectionState === \"connected\") {\n          updateConnectionStatus(\"connected\");\n          setState(prev => ({ \n            ...prev, \n            isSessionActive: true, \n            sessionId: session.id || `sess_${Math.random().toString(36).substr(2, 9)}`,\n          }));\n          \n          // Add initial greeting from EFA\n          const companyLower = company.toLowerCase();\n          let greeting = \"Hello! Thank you for calling. How may I assist you today?\";\n          \n          if (companyLower.includes(\"restaurant\")) {\n            greeting = \"Good day! Thank you for calling. What can I do for you?\";\n          } else if (companyLower.includes(\"hotel\")) {\n            greeting = \"Welcome! Thank you for contacting us. How can I help?\";\n          } else if (companyLower.includes(\"clinic\") || companyLower.includes(\"health\")) {\n            greeting = \"Hello, you've reached our clinic. How may I assist you?\";\n          } else if (companyLower.includes(\"bank\")) {\n            greeting = \"Hello! You've reached our banking services. What can I help you with?\";\n          }\n          \n          addTranscriptionMessage(\"EFA\", greeting);\n          \n          // Start latency monitoring\n          latencyCheckIntervalRef.current = setInterval(() => {\n            setState(prev => ({ ...prev, latency: Math.floor(Math.random() * 50) + 20 }));\n          }, 2000);\n          \n          logActivity(\"Session started successfully\");\n        } else if (pc.connectionState === \"failed\") {\n          updateConnectionStatus(\"error\");\n          logActivity(\"WebRTC connection failed\");\n        }\n      };\n\n      // Step 8: Create offer and set local description\n      logActivity(\"Creating SDP offer...\");\n      const offer = await pc.createOffer();\n      await pc.setLocalDescription(offer);\n\n      // Step 9: Send offer to OpenAI and get answer\n      logActivity(\"Sending offer to OpenAI...\");\n      const rtcResponse = await fetch(\"https://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${tokenValue}`,\n          \"Content-Type\": \"application/sdp\",\n        },\n        body: offer.sdp,\n      });\n\n      if (!rtcResponse.ok) {\n        const errorText = await rtcResponse.text();\n        logActivity(`OpenAI API Error (${rtcResponse.status}): ${errorText}`);\n        throw new Error(`OpenAI Realtime API error: ${rtcResponse.status} - ${errorText}`);\n      }\n\n      const answerSdp = await rtcResponse.text();\n      logActivity(\"Received SDP answer from OpenAI\");\n      await pc.setRemoteDescription({ type: \"answer\", sdp: answerSdp });\n      logActivity(\"Set remote description successfully\");\n      \n      logActivity(\"WebRTC connection established\");\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred\";\n      logActivity(`Connection failed: ${errorMessage}`);\n      updateConnectionStatus(\"error\");\n      \n      // Cleanup on error - use ref to avoid circular dependency\n      if (stopSessionRef.current) {\n        stopSessionRef.current();\n      }\n    }\n  }, [company, ainagerId, state.selectedVoice, logActivity, updateConnectionStatus, addTranscriptionMessage, resetActivityTimer]);\n\n  const stopSession = useCallback(() => {\n    logActivity(\"Stopping session...\");\n\n    // ✅ Clear all timeout timers to prevent memory leaks\n    clearAllTimeouts();\n\n    // Clear latency monitoring\n    if (latencyCheckIntervalRef.current) {\n      clearInterval(latencyCheckIntervalRef.current);\n      latencyCheckIntervalRef.current = null;\n    }\n\n    // Close peer connection\n    if (peerConnectionRef.current) {\n      peerConnectionRef.current.close();\n      peerConnectionRef.current = null;\n    }\n\n    // Stop local stream\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localStreamRef.current = null;\n    }\n\n    // Reset audio element\n    if (audioElementRef.current) {\n      audioElementRef.current.srcObject = null;\n    }\n\n    setState(prev => ({\n      ...prev,\n      connectionStatus: \"idle\",\n      isSessionActive: false,\n      sessionId: null,\n      latency: null,\n      transcription: [],\n    }));\n\n    logActivity(\"Session ended\");\n  }, [logActivity, clearAllTimeouts]);\n\n  // Update the ref whenever stopSession changes\n  stopSessionRef.current = stopSession;\n\n  const setAudioElement = useCallback((element: HTMLAudioElement) => {\n    audioElementRef.current = element;\n  }, []);\n\n  // ✅ Cleanup on page unload/refresh to prevent orphaned sessions\n  // This ensures timers are cleared and connections are closed properly\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      if (state.isSessionActive) {\n        console.log(\"[Cost Safeguard] Cleaning up session on page unload\");\n        clearAllTimeouts();\n        if (peerConnectionRef.current) {\n          peerConnectionRef.current.close();\n        }\n        if (localStreamRef.current) {\n          localStreamRef.current.getTracks().forEach(track => track.stop());\n        }\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      // Also cleanup when component unmounts\n      if (state.isSessionActive) {\n        console.log(\"[Cost Safeguard] Cleaning up session on component unmount\");\n        clearAllTimeouts();\n      }\n    };\n  }, [state.isSessionActive, clearAllTimeouts]);\n\n  return {\n    state,\n    startSession,\n    stopSession,\n    setAudioElement,\n    addTranscriptionMessage,\n  };\n}","size_bytes":19978},"replit.md":{"content":"# BizTalkAI - Voice Assistant Interface\n\n## Overview\n\nBizTalkAI (also known as Hainager) is an AI-powered business directory application that enables users to browse companies and initiate real-time voice conversations with AI assistants representing those businesses. The platform features a mobile-first, iOS-inspired interface for seamless voice interactions with company representatives powered by OpenAI's Realtime API.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Core Technology Stack:**\n- **React 18 with TypeScript** - Type-safe component development with modern React patterns\n- **Vite** - Fast build tool and development server with hot module replacement\n- **Wouter** - Lightweight client-side routing (file-based routing with `/` for home and `/p/:ainagerName` for direct calls)\n- **TanStack Query (React Query)** - Server state management with caching, pagination, and real-time data synchronization\n- **Tailwind CSS** - Utility-first styling with custom design system\n\n**Design System:**\n- iOS/Apple Human Interface Guidelines (HIG) inspired aesthetic\n- Custom theme configuration with light/dark mode support\n- Mobile-first responsive design with safe area insets for iOS devices\n- shadcn/ui component library for consistent, accessible UI components\n- Custom color palette with CSS variables for dynamic theming\n\n**Key UI Components:**\n- `DirectoryHeader` - Animated header with company branding\n- `CompanyList` & `CompanyListItem` - Scrollable directory with search\n- `VoiceModal` - Full-screen voice call interface\n- `VoiceVisualizer` - Real-time audio state visualization\n- `SearchBar` - Debounced search with instant feedback\n\n**State Management Strategy:**\n- React Query for server state (company data, pagination)\n- Local component state with hooks for UI interactions\n- Custom hooks for complex logic (`useWebRTCVoice`, `useAinagers`)\n- No global state management - component composition preferred\n\n### Backend Architecture\n\n**Server Framework:**\n- **Express.js** - RESTful API server with middleware-based architecture\n- **TypeScript with ES Modules** - Type-safe server code with modern import syntax\n- **HTTP Server** - Base server wrapped by Express for WebSocket upgrade support\n\n**API Design:**\n- RESTful endpoints under `/api` prefix\n- Pagination support with query parameters (`page`, `limit`, `search`)\n- Health check endpoint at `/api/health` for deployment monitoring\n- WebSocket endpoint for real-time voice communication\n\n**WebSocket Architecture:**\n- Client WebSocket connection upgrades at `/realtime/:company/:ainagerId`\n- Proxy pattern: Client ↔ Server WebSocket ↔ OpenAI Realtime API WebSocket\n- Bidirectional audio streaming with PCM16 encoding\n- Company-specific AI instructions dynamically injected based on business type\n\n**Audio Processing:**\n- AudioWorklet for client-side PCM16 encoding (`pcm16-encoder.js`)\n- Real-time audio capture via WebRTC MediaStream API\n- Base64-encoded audio chunks for WebSocket transmission\n- Audio playback through dynamically created HTML Audio elements\n\n**Session Management:**\n- Idle timeout: 8 minutes of inactivity triggers auto-disconnect\n- Hard timeout: 10 minutes maximum session duration\n- Activity tracking for cost control and resource optimization\n- Graceful cleanup with connection state management\n\n### Data Layer\n\n**Database Configuration:**\n- **MySQL** database via `mysql2` driver with connection pooling\n- **Drizzle ORM** for type-safe database queries and schema management\n- Database credentials configured via environment variables\n- Connection pooling for efficient resource utilization\n\n**Schema Design:**\n- `chat_ainager` table - Stores AI assistant (Ainager) metadata\n  - Primary key: `ainager_id`\n  - Core fields: `ainager_name`, `ainager_description`, `ainager_type`\n  - Configuration: `openai_key`, `ainager_instruction`, `is_active`\n  - Relationships: `parent_ainager` for hierarchical structures\n  - Audit fields: `ainager_create_date`, `ainager_delete_date`\n\n**Data Access Patterns:**\n- Repository pattern with `IStorage` interface\n- Pagination with offset/limit for large datasets\n- Case-insensitive search across company names\n- Caching strategy via React Query (5-minute stale time)\n\n**Query Optimization:**\n- Database connection pool prevents connection exhaustion\n- Indexed queries on `ainager_name` for search performance\n- Prepared statements via Drizzle ORM for SQL injection prevention\n\n### AI Integration\n\n**OpenAI Realtime API:**\n- Model: `gpt-4o-realtime-preview-2024-12-17`\n- Real-time bidirectional audio streaming over WebSocket\n- Dynamic system instructions based on company context\n- Voice selection: \"marin\" personality for consistent experience\n\n**Company-Specific Instructions:**\n- Context-aware AI behavior based on company name patterns\n- Predefined templates for: bakery, restaurant, clinic, hotel, bank, tech, logistics, food distribution\n- Fallback to generic professional assistant for unlisted business types\n- Professional, warm, and helpful conversational tone\n\n**Voice Features:**\n- Real-time speech-to-text transcription\n- AI response generation with company context\n- Audio streaming with minimal latency\n- Conversation state tracking (idle, connecting, listening, speaking, error)\n\n### Development & Deployment\n\n**Build System:**\n- Vite for frontend bundling with code splitting\n- esbuild for server-side TypeScript compilation\n- Development mode: Vite middleware integrated with Express\n- Production build: Separate frontend and backend bundles\n\n**Environment Configuration:**\n- `.env` file for local development\n- Replit Secrets for production credentials\n- Required secrets: `OPENAI_API_KEY`, `DB_HOST`, `DB_USER`, `DB_PASSWORD`, `DB_NAME`, `DB_PORT`\n- Port configuration: Server runs on port 5000 (configurable via `PORT` env var)\n\n**Deployment Strategy:**\n- Autoscale deployment type (stateless architecture)\n- Build command: `npm run build`\n- Start command: `npm run start`\n- Health check endpoint for monitoring\n- Host configuration: `0.0.0.0` for Replit proxy compatibility\n\n## External Dependencies\n\n**Core Services:**\n- **OpenAI Realtime API** - Real-time voice conversation engine (requires API key from platform.openai.com)\n- **MySQL Database** - Persistent storage for company/Ainager data (currently hosted at billsphere.com)\n\n**Frontend Libraries:**\n- **@tanstack/react-query** - Server state management and caching\n- **wouter** - Lightweight routing\n- **@radix-ui/* components** - Accessible UI primitives (20+ components)\n- **tailwindcss** - Utility-first CSS framework\n- **class-variance-authority** & **clsx** - Component variant styling\n- **lucide-react** - Icon library\n- **date-fns** - Date formatting utilities\n\n**Backend Libraries:**\n- **express** - Web server framework\n- **ws** - WebSocket implementation\n- **mysql2** - MySQL database driver\n- **drizzle-orm** & **drizzle-kit** - Type-safe ORM and migrations\n- **dotenv** - Environment variable management\n- **nanoid** - Unique ID generation\n\n**Build Tools:**\n- **vite** - Frontend build tool\n- **esbuild** - Server bundler\n- **tsx** - TypeScript execution\n- **typescript** - Type checking\n- **cross-env** - Cross-platform environment variables\n\n**Development Tools:**\n- **@replit/vite-plugin-*** - Replit-specific development enhancements (error overlay, cartographer, dev banner)\n- **postcss** & **autoprefixer** - CSS processing\n\n**Audio Processing:**\n- Native Web APIs: WebRTC MediaStream, AudioWorklet, Web Audio API\n- Custom PCM16 encoder worklet for audio format conversion","size_bytes":7590},"BizTalkAI-1/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"mysql\",\n  dbCredentials: {\n    host: process.env.DB_HOST || 'billsphere.com',\n    user: process.env.DB_USER || 'dulto726fxeg',\n    password: process.env.DB_PASSWORD || '',\n    database: process.env.DB_NAME || 'csvfiles',\n    port: parseInt(process.env.DB_PORT || '3306'),\n  },\n});\n","size_bytes":423},"BizTalkAI-1/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"BizTalkAI-1/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"BizTalkAI-1/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/Home\";\nimport DirectCall from \"@/pages/DirectCall\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/p/:ainagerName\" component={DirectCall} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":806},"BizTalkAI-1/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"BizTalkAI-1/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"BizTalkAI-1/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"BizTalkAI-1/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"BizTalkAI-1/client/src/components/examples/CompanyList.tsx":{"content":"import CompanyList from \"../CompanyList\";\n\nconst mockCompanies = [\n  \"Al Ameen bakery\",\n  \"Al Ameen Restaurant\",\n  \"Alpha Industries\",\n  \"Beta Solutions\",\n  \"Charlie Ventures\"\n] as const;\n\nexport default function CompanyListExample() {\n  return (\n    <CompanyList\n      companies={[...mockCompanies]}\n      onCompanyClick={(company) => console.log(\"Selected:\", company)}\n    />\n  );\n}\n","size_bytes":385},"BizTalkAI-1/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"BizTalkAI-1/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\n// Helper function to generate company-specific instructions\nfunction getCompanyInstructions(company: string): string {\n  const companyLower = company.toLowerCase();\n\n  let baseInstructions = `You are an AI assistant working as the Enterprise Front/Friend Ainager for ${company}, a hypothetical company based in Dubai. You are professional, helpful, and knowledgeable about the company's services. `;\n\n  if (companyLower.includes(\"bakery\")) {\n    baseInstructions += `You work at a bakery that offers fresh bread baked daily from 6 AM, specialty pastries, custom cakes, gluten-free options, and catering services. Help customers with orders, answer questions about products, and provide information about our services.`;\n  } else if (companyLower.includes(\"restaurant\")) {\n    baseInstructions += `You work at a restaurant open 11 AM - 10 PM daily. Reservations are recommended for weekends. We serve traditional and contemporary cuisine with private dining rooms available. Help customers make reservations, answer menu questions, and provide dining information.`;\n  } else if (companyLower.includes(\"clinic\") || companyLower.includes(\"health\")) {\n    baseInstructions += `You work at a medical clinic offering walk-in appointments, specialist consultations, health check-up packages, and 24/7 emergency services. Help patients schedule appointments, answer questions about services, and provide general information.`;\n  } else if (companyLower.includes(\"hotel\")) {\n    baseInstructions += `You work at a luxury hotel with modern amenities, conference facilities, fine dining, and a spa. Help guests with reservations, answer questions about facilities and services, and provide concierge assistance.`;\n  } else if (companyLower.includes(\"bank\")) {\n    baseInstructions += `You work at a bank offering personal and business banking, investment and loan services, 24/7 online banking, and financial advisory. Help customers with account inquiries, service information, and general banking questions.`;\n  } else if (companyLower.includes(\"tech\") || companyLower.includes(\"digital\") || companyLower.includes(\"systems\")) {\n    baseInstructions += `You work at a technology company providing custom software development, cloud infrastructure, IT consulting and support, and digital transformation services. Help clients understand our solutions and services.`;\n  } else if (companyLower.includes(\"industries\") || companyLower.includes(\"solutions\")) {\n    baseInstructions += `You work at an industrial company providing equipment, machinery, custom manufacturing, quality control, and worldwide shipping. Help clients with product inquiries and service information.`;\n  } else if (companyLower.includes(\"logistics\") || companyLower.includes(\"travel\")) {\n    baseInstructions += `You work at a logistics company offering domestic and international shipping, real-time tracking, express delivery, and warehouse services. Help customers with shipping inquiries and tracking information.`;\n  } else if (companyLower.includes(\"foods\")) {\n    baseInstructions += `You work at a food distribution company offering premium quality products, wholesale and retail distribution, fresh produce, and bulk order discounts. Help customers with product information and orders.`;\n  } else {\n    baseInstructions += `You provide professional business services with a customer-focused approach. Help callers with their inquiries and provide information about your services.`;\n  }\n\n  baseInstructions += ` Be conversational, warm, and helpful. Answer questions clearly and concisely. Since this is a demo, you can provide reasonable and professional responses based on the company name and type. Always mention that we are located in Dubai when relevant.`;\n\n  return baseInstructions;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    const hasApiKey = !!process.env.OPENAI_API_KEY;\n    res.json({\n      status: \"Realtime voice server is up\",\n      environment: process.env.NODE_ENV || 'unknown',\n      deployment: process.env.REPLIT_DEPLOYMENT === '1',\n      apiKeyConfigured: hasApiKey\n    });\n  });\n\n  // Get ainagers endpoint with pagination and search\n  app.get(\"/api/ainagers\", async (req, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const search = (req.query.search as string) || \"\";\n      \n      const result = await storage.getAinagers(page, limit, search);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching ainagers:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch ainagers from database\" \n      });\n    }\n  });\n\n  // Get specific ainager by ID endpoint\n  app.get(\"/api/ainagers/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const ainager = await storage.getAinagerById(id);\n      \n      if (!ainager) {\n        return res.status(404).json({ \n          error: \"Ainager not found\" \n        });\n      }\n      \n      res.json(ainager);\n    } catch (error) {\n      console.error(\"Error fetching ainager:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch ainager from database\" \n      });\n    }\n  });\n\n  // Session endpoint to mint ephemeral client secrets\n  app.post(\"/api/session\", async (req, res) => {\n    try {\n      const { voice = \"marin\", model = \"gpt-realtime\", company = \"\", ainagerId = \"\" } = req.body;\n\n      console.log(`[Session] Creating session for company: \"${company}\", ainagerId: \"${ainagerId}\"`);\n\n      const OPENAI_API_KEY = process.env.OPENAI_API_KEY;\n      \n      if (!OPENAI_API_KEY) {\n        console.error(\"OpenAI API key missing. Environment:\", {\n          isDevelopment: process.env.NODE_ENV === 'development',\n          isDeployment: process.env.REPLIT_DEPLOYMENT === '1',\n          availableKeys: Object.keys(process.env).filter(key => key.includes('OPENAI'))\n        });\n        return res.status(500).json({ \n          error: \"OpenAI API key not configured. Please ensure OPENAI_API_KEY is set in your Replit Secrets.\" \n        });\n      }\n\n      // Call OpenAI's client secrets endpoint to mint ephemeral token\n      const sessionBody: any = {\n        model: \"gpt-4o-realtime-preview-2024-10-01\",\n        voice: voice,\n      };\n\n      // Try to get instructions from database first, then fallback to static\n      let instructions = \"\";\n      \n      if (ainagerId) {\n        const ainager = await storage.getAinagerById(ainagerId);\n        if (ainager) {\n          instructions = ainager.ainagerInstruction || \"\";\n          console.log(`[Session] Using ainager instructions for ID \"${ainagerId}\": ${instructions.substring(0, 100)}...`);\n        }\n      }\n      \n      // Fallback to company-specific instructions if no ainager found\n      if (!instructions && company) {\n        instructions = getCompanyInstructions(company);\n        console.log(`[Session] Using fallback instructions for \"${company}\": ${instructions.substring(0, 100)}...`);\n      }\n      \n      if (instructions) {\n        sessionBody.instructions = instructions;\n      } else {\n        console.log('[Session] No instructions found, using default behavior');\n      }\n\n      const sessionResponse = await fetch(\"https://api.openai.com/v1/realtime/sessions\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${OPENAI_API_KEY}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(sessionBody),\n      });\n\n      if (!sessionResponse.ok) {\n        const errorText = await sessionResponse.text();\n        console.error(\"=== FULL OPENAI API ERROR ===\");\n        console.error(\"Status:\", sessionResponse.status);\n        console.error(\"Status Text:\", sessionResponse.statusText);\n        console.error(\"Full Error Response:\", errorText);\n        console.error(\"=============================\");\n        return res.status(sessionResponse.status).json({ \n          error: `OpenAI API error: ${errorText}` \n        });\n      }\n\n      const sessionData = await sessionResponse.json();\n\n      res.json({\n        client_secret: sessionData.client_secret,\n        session: sessionData,\n      });\n    } catch (error) {\n      console.error(\"Session creation error:\", error);\n      res.status(500).json({ \n        error: \"Failed to create session. Please check your OpenAI API key and try again.\" \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":8651},"BizTalkAI-1/client/src/components/DirectoryHeader.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Sparkles } from \"lucide-react\";\n\nexport default function DirectoryHeader() {\n  const [isFriend, setIsFriend] = useState(true);\n  const [opacity, setOpacity] = useState(1);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setOpacity(0);\n      setTimeout(() => {\n        setIsFriend(prev => !prev);\n        setOpacity(1);\n      }, 180);\n    }, 2200);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"relative px-6 py-5\">\n      {/* Subtle gradient background */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-primary/5 to-transparent\"></div>\n      \n      <div className=\"relative flex items-center gap-4\">\n        {/* Gradient Avatar with Animation */}\n        <div className=\"relative\">\n          <div className=\"w-14 h-14 rounded-2xl bg-gradient-to-br from-primary via-primary/90 to-primary/70 flex items-center justify-center text-primary-foreground font-bold text-2xl shadow-lg ring-2 ring-primary/20\">\n            H\n          </div>\n          <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-card shadow-sm\"></div>\n        </div>\n        \n        {/* Text Content */}\n        <div className=\"flex flex-col gap-1\">\n          <div className=\"flex items-center gap-2\">\n            <h1 className=\"text-2xl font-bold tracking-tight bg-gradient-to-r from-foreground to-foreground/70 bg-clip-text\">\n              Hainager\n            </h1>\n            <Sparkles className=\"w-4 h-4 text-primary animate-pulse\" />\n          </div>\n          <p className=\"text-sm text-muted-foreground whitespace-nowrap font-medium\">\n            Enterprise{\" \"}\n            <span\n              style={{ opacity, transition: \"opacity 0.25s ease\" }}\n              className=\"inline-block text-primary font-semibold\"\n            >\n              {isFriend ? \"Friend\" : \"Front\"}\n            </span>{\" \"}\n            Ainager\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2022},"BizTalkAI-1/client/src/components/SearchBar.tsx":{"content":"import { Search, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SearchBarProps {\n  value: string;\n  onChange: (value: string) => void;\n  onSearch: () => void;\n}\n\nexport default function SearchBar({ value, onChange, onSearch }: SearchBarProps) {\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      onSearch();\n    }\n  };\n\n  const handleClear = () => {\n    onChange(\"\");\n  };\n\n  return (\n    <div className=\"flex gap-2 px-6 pb-5\">\n      <div className=\"relative flex-1\">\n        <Search className=\"absolute left-4 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground pointer-events-none\" />\n        <input\n          type=\"text\"\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          onKeyDown={handleKeyDown}\n          placeholder=\"Search assistants...\"\n          aria-label=\"Search companies\"\n          data-testid=\"input-search\"\n          className=\"w-full h-12 pl-11 pr-10 bg-muted/50 border border-input/50 rounded-2xl text-base outline-none transition-all duration-200 focus:border-primary focus:bg-background focus:shadow-lg focus:shadow-primary/10 placeholder:text-muted-foreground/50\"\n        />\n        {value && (\n          <button\n            onClick={handleClear}\n            className=\"absolute right-3 top-1/2 -translate-y-1/2 w-6 h-6 flex items-center justify-center rounded-full hover:bg-muted transition-colors\"\n            aria-label=\"Clear search\"\n          >\n            <X className=\"w-4 h-4 text-muted-foreground\" />\n          </button>\n        )}\n      </div>\n      <Button\n        onClick={onSearch}\n        size=\"default\"\n        className=\"h-12 px-5 rounded-2xl font-semibold shrink-0 shadow-lg hover:shadow-xl transition-all duration-200\"\n        data-testid=\"button-search\"\n      >\n        <Search className=\"w-4 h-4 sm:mr-2\" />\n        <span className=\"hidden sm:inline\">Search</span>\n      </Button>\n    </div>\n  );\n}\n","size_bytes":1955},"BizTalkAI-1/client/src/pages/Home.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { type Ainager } from \"@shared/schema\";\nimport DirectoryHeader from \"@/components/DirectoryHeader\";\nimport SearchBar from \"@/components/SearchBar\";\nimport CompanyList from \"@/components/CompanyList\";\nimport VoiceModal from \"@/components/VoiceModal\";\nimport { useAinagers } from \"@/hooks/useAinagers\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2 } from \"lucide-react\";\n\nexport default function Home() {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [debouncedSearch, setDebouncedSearch] = useState(\"\");\n  const [selectedAinager, setSelectedAinager] = useState<Ainager | null>(null);\n  const [page, setPage] = useState(1);\n  const [allAinagers, setAllAinagers] = useState<Ainager[]>([]);\n  \n  const limit = page === 1 ? 10 : 5; // First page: 10, subsequent: 5\n  const { data, isLoading, error, isFetching } = useAinagers(page, limit, debouncedSearch);\n  \n  // Debounce search input\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedSearch(searchValue);\n      setPage(1); // Reset to page 1 on new search\n      setAllAinagers([]); // Clear accumulated data on new search\n    }, 500);\n    \n    return () => clearTimeout(timer);\n  }, [searchValue]);\n  \n  // Accumulate ainagers as pages load\n  useEffect(() => {\n    if (data?.ainagers) {\n      if (page === 1) {\n        setAllAinagers(data.ainagers);\n      } else {\n        setAllAinagers(prev => [...prev, ...data.ainagers]);\n      }\n    }\n  }, [data, page]);\n\n  const handleCompanyClick = (ainager: Ainager) => {\n    setSelectedAinager(ainager);\n  };\n\n  const handleCloseModal = () => {\n    setSelectedAinager(null);\n  };\n\n  const handleShowMore = () => {\n    setPage(prev => prev + 1);\n  };\n\n  const handleSearch = () => {\n    // Search is handled by debounce, this is just for the button click\n    setDebouncedSearch(searchValue);\n    setPage(1);\n    setAllAinagers([]);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex justify-center bg-gradient-to-br from-background via-muted/20 to-background\">\n        <main className=\"w-full max-w-[480px] bg-card/95 backdrop-blur-sm shadow-2xl mx-3 my-0 sm:my-6 sm:rounded-3xl overflow-hidden flex flex-col border border-border/50\">\n          <div className=\"sticky top-0 z-10 bg-card/80 backdrop-blur-md border-b border-border/50 shadow-sm\">\n            <DirectoryHeader />\n            <SearchBar\n              value={searchValue}\n              onChange={setSearchValue}\n              onSearch={handleSearch}\n            />\n          </div>\n          <div className=\"flex-1 flex flex-col items-center justify-center py-20\">\n            <div className=\"relative\">\n              <div className=\"w-16 h-16 border-4 border-primary/30 border-t-primary rounded-full animate-spin\"></div>\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"w-8 h-8 bg-primary/20 rounded-full animate-pulse\"></div>\n              </div>\n            </div>\n            <p className=\"mt-6 text-muted-foreground font-medium\">Loading assistants...</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (error) {\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error occurred\";\n    const isDatabaseError = errorMessage.toLowerCase().includes(\"database\") || \n                           errorMessage.toLowerCase().includes(\"connection\") ||\n                           errorMessage.toLowerCase().includes(\"fetch\");\n    \n    return (\n      <div className=\"min-h-screen flex justify-center bg-gradient-to-br from-background via-muted/20 to-background\">\n        <main className=\"w-full max-w-[480px] bg-card/95 backdrop-blur-sm shadow-2xl mx-3 my-0 sm:my-6 sm:rounded-3xl overflow-hidden flex flex-col border border-border/50\">\n          <div className=\"sticky top-0 z-10 bg-card/80 backdrop-blur-md border-b border-border/50 shadow-sm\">\n            <DirectoryHeader />\n            <SearchBar\n              value={searchValue}\n              onChange={setSearchValue}\n              onSearch={handleSearch}\n            />\n          </div>\n          <div className=\"flex-1 flex flex-col items-center justify-center py-20 px-6\">\n            <div className=\"w-20 h-20 rounded-full bg-destructive/10 flex items-center justify-center mb-6 relative\">\n              <svg className=\"w-10 h-10 text-destructive\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              {isDatabaseError && (\n                <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-destructive rounded-full flex items-center justify-center\">\n                  <svg className=\"w-4 h-4 text-destructive-foreground\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4\" />\n                  </svg>\n                </div>\n              )}\n            </div>\n            <p className=\"text-destructive font-semibold text-center text-lg mb-2\">\n              {isDatabaseError ? \"Database Connection Error\" : \"Failed to Load Assistants\"}\n            </p>\n            <p className=\"text-sm text-muted-foreground text-center max-w-xs\">\n              {isDatabaseError \n                ? \"The server lost connection to the database. This may be temporary.\"\n                : \"Unable to fetch assistants. Please check your connection.\"\n              }\n            </p>\n            <div className=\"mt-6 p-3 bg-muted/50 rounded-lg max-w-xs\">\n              <p className=\"text-xs text-muted-foreground text-center font-mono break-all\">\n                {errorMessage}\n              </p>\n            </div>\n            <Button\n              onClick={() => window.location.reload()}\n              variant=\"default\"\n              className=\"mt-6\"\n            >\n              Retry Connection\n            </Button>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex justify-center bg-gradient-to-br from-background via-muted/20 to-background\">\n      <main className=\"w-full max-w-[480px] bg-card/95 backdrop-blur-sm shadow-2xl mx-3 my-0 sm:my-6 sm:rounded-3xl overflow-hidden flex flex-col border border-border/50\">\n        <div className=\"sticky top-0 z-10 bg-card/80 backdrop-blur-md border-b border-border/50 shadow-lg\">\n          <DirectoryHeader />\n          <SearchBar\n            value={searchValue}\n            onChange={setSearchValue}\n            onSearch={() => console.log(\"Search triggered\")}\n          />\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto\">\n          {/* Inline Error Banner (shown when there's data but pagination/refresh fails) */}\n          {error && allAinagers.length > 0 && (\n            <div className=\"mx-4 mt-4 mb-2 p-4 bg-destructive/10 border border-destructive/20 rounded-xl\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"flex-shrink-0 w-5 h-5 rounded-full bg-destructive/20 flex items-center justify-center mt-0.5\">\n                  <svg className=\"w-3 h-3 text-destructive\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01\" />\n                  </svg>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-semibold text-destructive\">Connection Error</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {error instanceof Error && error.message.toLowerCase().includes(\"database\")\n                      ? \"Database connection lost. Showing cached results.\"\n                      : \"Unable to fetch new data. Showing cached results.\"\n                    }\n                  </p>\n                </div>\n                <Button\n                  onClick={() => window.location.reload()}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-7 text-xs\"\n                >\n                  Retry\n                </Button>\n              </div>\n            </div>\n          )}\n          \n          {allAinagers.length === 0 && !isLoading && debouncedSearch ? (\n            <div className=\"flex flex-col items-center justify-center py-20 px-6\">\n              <div className=\"w-16 h-16 rounded-full bg-muted flex items-center justify-center mb-4\">\n                <svg className=\"w-8 h-8 text-muted-foreground\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                </svg>\n              </div>\n              <p className=\"text-muted-foreground font-medium text-center\">No assistants found</p>\n              <p className=\"text-sm text-muted-foreground/60 mt-2 text-center\">Try searching with different keywords</p>\n            </div>\n          ) : (\n            <>\n              <CompanyList\n                ainagers={allAinagers}\n                onCompanyClick={handleCompanyClick}\n              />\n              \n              {/* Show More Button */}\n              {data?.hasMore && (\n                <div className=\"px-6 py-4 flex justify-center\">\n                  <Button\n                    onClick={handleShowMore}\n                    disabled={isFetching}\n                    variant=\"outline\"\n                    className=\"w-full max-w-sm rounded-xl font-semibold\"\n                  >\n                    {isFetching ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Loading...\n                      </>\n                    ) : (\n                      `Show More (${data.total - allAinagers.length} remaining)`\n                    )}\n                  </Button>\n                </div>\n              )}\n              \n              {/* End of List Message */}\n              {!data?.hasMore && allAinagers.length > 0 && (\n                <div className=\"px-6 py-6 text-center\">\n                  <p className=\"text-xs text-muted-foreground\">\n                    All {allAinagers.length} assistants shown\n                  </p>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </main>\n\n      {selectedAinager && (\n        <VoiceModal\n          ainager={selectedAinager}\n          isOpen={!!selectedAinager}\n          onClose={handleCloseModal}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":10862},"BizTalkAI-1/client/src/components/CompanyListItem.tsx":{"content":"import { type Ainager } from \"@shared/schema\";\nimport { Phone } from \"lucide-react\";\n\ninterface CompanyListItemProps {\n  ainager: Ainager;\n  onClick: (ainager: Ainager) => void;\n}\n\nexport default function CompanyListItem({ ainager, onClick }: CompanyListItemProps) {\n  const initial = ainager.ainagerName.charAt(0).toUpperCase();\n  \n  return (\n    <button\n      onClick={() => onClick(ainager)}\n      className=\"group w-full flex items-center gap-4 py-3.5 px-4 rounded-xl cursor-pointer transition-all duration-200 hover:bg-primary/5 active:scale-[0.99] border border-transparent hover:border-primary/20\"\n      data-testid={`item-company-${ainager.ainagerName.toLowerCase().replace(/\\s+/g, \"-\")}`}\n    >\n      {/* Avatar */}\n      <div className=\"relative flex-shrink-0\">\n        <div className=\"w-11 h-11 rounded-lg bg-gradient-to-br from-primary/15 to-primary/5 flex items-center justify-center text-primary font-bold text-base\">\n          {initial}\n        </div>\n        <div className=\"absolute -bottom-0.5 -right-0.5 w-3 h-3 bg-green-500 rounded-full border-2 border-card\"></div>\n      </div>\n      \n      {/* Content */}\n      <div className=\"flex-1 min-w-0 text-left\">\n        <h3 className=\"font-semibold text-foreground truncate text-[15px] leading-tight\">\n          {ainager.ainagerName}\n        </h3>\n        <p className=\"text-xs text-muted-foreground mt-0.5\">\n          Business Assistant\n        </p>\n      </div>\n      \n      {/* Call Button */}\n      <div className=\"flex-shrink-0 w-9 h-9 rounded-full bg-primary/10 group-hover:bg-primary group-hover:scale-110 flex items-center justify-center transition-all duration-200\">\n        <Phone className=\"w-4 h-4 text-primary group-hover:text-primary-foreground transition-colors\" />\n      </div>\n    </button>\n  );\n}\n","size_bytes":1780},"BizTalkAI-1/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"BizTalkAI-1/client/src/pages/DirectCall.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport VoiceModal from \"@/components/VoiceModal\";\nimport { Loader2, AlertCircle } from \"lucide-react\";\nimport { type Ainager } from \"@shared/schema\";\n\nexport default function DirectCall() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const ainagerName = params.ainagerName;\n  \n  const [ainager, setAinager] = useState<Ainager | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function fetchAinager() {\n      if (!ainagerName) {\n        setError(\"No ainager name provided\");\n        setIsLoading(false);\n        return;\n      }\n\n      try {\n        setIsLoading(true);\n        \n        // Search for ainager by name (case-insensitive)\n        const response = await fetch(`/api/ainagers?search=${encodeURIComponent(ainagerName)}&limit=1`);\n        \n        if (!response.ok) {\n          throw new Error(\"Failed to fetch ainager\");\n        }\n\n        const data = await response.json();\n        \n        // Check if we found an exact match (case-insensitive)\n        const foundAinager = data.ainagers?.find(\n          (a: Ainager) => a.ainagerName.toLowerCase() === ainagerName.toLowerCase()\n        );\n\n        if (foundAinager) {\n          setAinager(foundAinager);\n          setError(null);\n        } else {\n          setError(`Ainager \"${ainagerName}\" not found`);\n          // Redirect to home after 3 seconds\n          setTimeout(() => {\n            setLocation(\"/\");\n          }, 3000);\n        }\n      } catch (err) {\n        console.error(\"Error fetching ainager:\", err);\n        setError(\"Failed to load ainager. Please try again.\");\n        // Redirect to home after 3 seconds\n        setTimeout(() => {\n          setLocation(\"/\");\n        }, 3000);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchAinager();\n  }, [ainagerName, setLocation]);\n\n  const handleClose = () => {\n    setLocation(\"/\");\n  };\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"fixed inset-0 z-50 bg-background flex items-center justify-center\">\n        <div className=\"flex flex-col items-center gap-4\">\n          <Loader2 className=\"w-12 h-12 text-primary animate-spin\" />\n          <p className=\"text-muted-foreground\">Loading {ainagerName}...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Error state\n  if (error) {\n    const isDatabaseError = error.toLowerCase().includes(\"database\") || \n                           error.toLowerCase().includes(\"connection\") ||\n                           error.toLowerCase().includes(\"failed to fetch\");\n    \n    return (\n      <div className=\"fixed inset-0 z-50 bg-background flex items-center justify-center p-4\">\n        <div className=\"max-w-md w-full bg-card border border-border rounded-2xl p-8 text-center shadow-2xl\">\n          <div className=\"w-20 h-20 rounded-full bg-destructive/10 flex items-center justify-center mx-auto mb-6 relative\">\n            <AlertCircle className=\"w-10 h-10 text-destructive\" />\n            {isDatabaseError && (\n              <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-destructive rounded-full flex items-center justify-center\">\n                <svg className=\"w-4 h-4 text-destructive-foreground\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4\" />\n                </svg>\n              </div>\n            )}\n          </div>\n          <h2 className=\"text-xl font-bold mb-3\">\n            {isDatabaseError ? \"Database Connection Error\" : \"Ainager Not Found\"}\n          </h2>\n          <p className=\"text-muted-foreground mb-2\">{error}</p>\n          {isDatabaseError && (\n            <p className=\"text-sm text-muted-foreground/80 mb-4\">\n              The server lost connection to the database. This may be temporary.\n            </p>\n          )}\n          <p className=\"text-sm text-muted-foreground\">\n            Redirecting to home page...\n          </p>\n          <div className=\"mt-6\">\n            <div className=\"w-full bg-muted rounded-full h-1 overflow-hidden\">\n              <div \n                className=\"h-full bg-primary animate-[shrink_3s_linear]\"\n                style={{ width: \"100%\" }}\n              ></div>\n            </div>\n          </div>\n        </div>\n        <style>{`\n          @keyframes shrink {\n            from { width: 100%; }\n            to { width: 0%; }\n          }\n        `}</style>\n      </div>\n    );\n  }\n\n  // Success - show voice modal\n  if (ainager) {\n    return (\n      <VoiceModal\n        ainager={ainager}\n        isOpen={true}\n        onClose={handleClose}\n      />\n    );\n  }\n\n  return null;\n}\n\n\n\n","size_bytes":4985},"BizTalkAI-1/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    // Skip API routes - let them be handled by the API middleware\n    if (url.startsWith(\"/api/\")) {\n      return next();\n    }\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2393},"BizTalkAI-1/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"BizTalkAI-1/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"BizTalkAI-1/client/src/components/examples/DirectoryHeader.tsx":{"content":"import DirectoryHeader from \"../DirectoryHeader\";\n\nexport default function DirectoryHeaderExample() {\n  return <DirectoryHeader />;\n}\n","size_bytes":134},"BizTalkAI-1/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772}},"version":2}